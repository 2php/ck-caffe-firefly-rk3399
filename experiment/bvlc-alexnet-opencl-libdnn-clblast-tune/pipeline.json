{
  "cmd_key": "default", 
  "tmp_dir": "", 
  "features": {
    "compiler_version": {
      "raw": [
        "gcc (Ubuntu/Linaro 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609", 
        "Copyright (C) 2015 Free Software Foundation, Inc.", 
        "This is free software; see the source for copying conditions.  There is NO", 
        "warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.", 
        "", 
        ""
      ], 
      "list": [
        5, 
        4, 
        0
      ], 
      "str": "5.4.0"
    }
  }, 
  "characteristics": {}, 
  "no_clean": "yes", 
  "no_compile": "yes", 
  "choices": {
    "cpu_freq": "max", 
    "no_state_check": "yes", 
    "target": "", 
    "module_uoa": "b0ac08fe1d3c2615", 
    "energy": "no", 
    "device_cfg": {}, 
    "flags": "-O3", 
    "dataset_file": "", 
    "cmd_key": "default", 
    "skip_print_timers": "yes", 
    "skip_calibration": "yes", 
    "compile_type": "dynamic", 
    "target_os_bits": "32", 
    "data_uoa": "caffe-time-opencl", 
    "device_id": "", 
    "host_os": "linux-32", 
    "target_os": "linux-32", 
    "gpu_freq": "max"
  }, 
  "state": {
    "tmp_dir": "tmp", 
    "cur_dir": "/home/test/CK_REPOS/ck-caffe/script/explore-batch-size-libs-models"
  }, 
  "dependencies": {
    "lib-viennacl": {
      "sort": 35, 
      "bat": ". /home/test/CK_REPOS/local/env/1d680cb54b0c85e8/env.sh\n", 
      "cus": {
        "git_src_dir": "src", 
        "add_include_path": "yes", 
        "use_git_revision": "yes", 
        "used_package_uid": "45d3a33c885e7dfd", 
        "used_package_uoa": "45d3a33c885e7dfd", 
        "path_include": "/home/test/CK_TOOLS/lib-viennacl-src-dvdt-master-linux-32/src", 
        "extra_dir": "", 
        "skip_path": "yes", 
        "version": "dvdt-master-0d62d8e", 
        "env_prefix": "CK_ENV_LIB_VIENNACL", 
        "git_info": {
          "revision": "0d62d8e", 
          "iso_datetime_cut": "20170425", 
          "iso_datetime_cut_revision": "20170425-0d62d8e", 
          "iso_datetime": "2017-04-25T16:58:53", 
          "datetime": "Tue Apr 25 16:58:53 2017 +0200"
        }, 
        "version_split": [
          0, 
          0, 
          0
        ], 
        "install_env": {
          "PACKAGE_AUTOGEN": "NO", 
          "PACKAGE_SKIP_CLEAN_OBJ": "NO", 
          "PACKAGE_SKIP_CLEAN_INSTALL": "NO", 
          "PACKAGE_CONFIGURE_FLAGS_WINDOWS": "", 
          "PACKAGE_GIT": "YES", 
          "PACKAGE_SKIP_CMAKE_TARGET": "NO", 
          "PACKAGE_USE_OPENCL": 0, 
          "PACKAGE_SKIP_CLEAN_PACKAGE": "NO", 
          "PACKAGE_SUB_DIR": "src", 
          "PACKAGE_GIT_CHECKOUT": "master", 
          "PACKAGE_SKIP_CLEAN_SRC_DIR": "NO", 
          "PACKAGE_PATCH": "NO", 
          "PACKAGE_CONFIGURE_FLAGS_LINUX": "", 
          "PACKAGE_SKIP_CLEAN_SRC": "NO", 
          "CK_INSTALL_ENABLE_OPENCL": "OFF", 
          "PACKAGE_URL": "https://github.com/dividiti/viennacl-dev", 
          "PACKAGE_SUB_DIR1": "src", 
          "PACKAGE_CONFIGURE_FLAGS_ANDROID": "", 
          "PACKAGE_SKIP_LINUX_MAKE": "YES"
        }, 
        "full_path": "/home/test/CK_TOOLS/lib-viennacl-src-dvdt-master-linux-32/src/viennacl/version.hpp"
      }, 
      "name": "ViennaCL library", 
      "tags": "lib,viennacl,vsrc,vdvdt", 
      "local": "yes", 
      "skip_default": "yes", 
      "num_entries": 1, 
      "choices": [
        "1d680cb54b0c85e8"
      ], 
      "uoa": "1d680cb54b0c85e8", 
      "ver": "dvdt-master-0d62d8e", 
      "skip_linking": "yes", 
      "skip_copy_to_remote": "yes"
    }, 
    "lib-gflags": {
      "sort": 5, 
      "bat": ". /home/test/CK_REPOS/local/env/1429ab9526e8076d/env.sh\n", 
      "cus": {
        "dynamic_lib": "libgflags.so", 
        "static_lib": "libgflags.a", 
        "skip_path": "yes", 
        "soft_file": {
          "win": "gflags.lib", 
          "linux": "libgflags.so"
        }, 
        "version": "2", 
        "env_prefix": "CK_ENV_LIB_GFLAGS", 
        "version_split": [
          2
        ], 
        "limit_recursion_dir_search": {
          "win": 3, 
          "linux": 3
        }, 
        "check_that_exists": "yes", 
        "soft_path_example": {
          "win": "", 
          "linux": "/usr/lib/x86_64-linux-gnu/libgflags.so"
        }, 
        "path_include": "/usr/include", 
        "ck_version": 10, 
        "full_path": "/usr/lib/arm-linux-gnueabihf/libgflags.so", 
        "path_lib": "/usr/lib/arm-linux-gnueabihf"
      }, 
      "name": "GFlags library", 
      "tags": "lib,gflags", 
      "num_entries": 1, 
      "choices": [
        "1429ab9526e8076d"
      ], 
      "uoa": "1429ab9526e8076d", 
      "dict": {
        "data_name": "GFlags library", 
        "deps": {}, 
        "tags": [
          "32bits", 
          "gflags", 
          "host-os-linux-32", 
          "lib", 
          "target-os-linux-32", 
          "v2"
        ], 
        "customize": {
          "dynamic_lib": "libgflags.so", 
          "static_lib": "libgflags.a", 
          "skip_path": "yes", 
          "soft_file": {
            "win": "gflags.lib", 
            "linux": "libgflags.so"
          }, 
          "version": "2", 
          "env_prefix": "CK_ENV_LIB_GFLAGS", 
          "version_split": [
            2
          ], 
          "limit_recursion_dir_search": {
            "win": 3, 
            "linux": 3
          }, 
          "check_that_exists": "yes", 
          "soft_path_example": {
            "win": "", 
            "linux": "/usr/lib/x86_64-linux-gnu/libgflags.so"
          }, 
          "path_include": "/usr/include", 
          "ck_version": 10, 
          "full_path": "/usr/lib/arm-linux-gnueabihf/libgflags.so", 
          "path_lib": "/usr/lib/arm-linux-gnueabihf"
        }, 
        "setup": {
          "version_split": [
            2
          ], 
          "target_os_bits": "32", 
          "version": "2", 
          "host_os_uoa": "fb525e34243f49c1", 
          "target_os_uoa": "fb525e34243f49c1"
        }, 
        "env_script": "env.sh", 
        "soft_uoa": "64abac44465943ea", 
        "env": {
          "CK_ENV_LIB_GFLAGS": "/usr", 
          "CK_ENV_LIB_GFLAGS_DYNAMIC_NAME": "libgflags.so", 
          "CK_ENV_LIB_GFLAGS_STATIC_NAME": "libgflags.a", 
          "CK_ENV_LIB_GFLAGS_LFLAG": "-lgflags"
        }, 
        "soft_alias": "lib.gflags"
      }, 
      "ver": "2", 
      "local": "yes"
    }, 
    "lib-protobuf": {
      "sort": 9, 
      "local": "yes", 
      "name": "ProtoBuf library", 
      "only_for_target_os_tags": [
        "android"
      ], 
      "tags": "lib,protobuf"
    }, 
    "lib-glog": {
      "sort": 7, 
      "bat": ". /home/test/CK_REPOS/local/env/6d794182a345dc6c/env.sh\n", 
      "cus": {
        "dynamic_lib": "libglog.so", 
        "static_lib": "libglog.a", 
        "skip_path": "yes", 
        "soft_file": {
          "win": "glog.lib", 
          "linux": "libglog.so"
        }, 
        "version": "0", 
        "env_prefix": "CK_ENV_LIB_GLOG", 
        "version_split": [
          0
        ], 
        "limit_recursion_dir_search": {
          "win": 3, 
          "linux": 3
        }, 
        "check_that_exists": "yes", 
        "soft_path_example": {
          "win": "", 
          "linux": "/usr/lib/x86_64-linux-gnu/libglog.so"
        }, 
        "path_include": "/usr/include", 
        "ck_version": 10, 
        "full_path": "/usr/lib/arm-linux-gnueabihf/libglog.so", 
        "path_lib": "/usr/lib/arm-linux-gnueabihf"
      }, 
      "name": "GLog library", 
      "tags": "lib,glog", 
      "num_entries": 1, 
      "choices": [
        "6d794182a345dc6c"
      ], 
      "uoa": "6d794182a345dc6c", 
      "dict": {
        "data_name": "GLog library", 
        "deps": {}, 
        "tags": [
          "32bits", 
          "glog", 
          "host-os-linux-32", 
          "lib", 
          "target-os-linux-32", 
          "v0"
        ], 
        "customize": {
          "dynamic_lib": "libglog.so", 
          "static_lib": "libglog.a", 
          "skip_path": "yes", 
          "soft_file": {
            "win": "glog.lib", 
            "linux": "libglog.so"
          }, 
          "version": "0", 
          "env_prefix": "CK_ENV_LIB_GLOG", 
          "version_split": [
            0
          ], 
          "limit_recursion_dir_search": {
            "win": 3, 
            "linux": 3
          }, 
          "check_that_exists": "yes", 
          "soft_path_example": {
            "win": "", 
            "linux": "/usr/lib/x86_64-linux-gnu/libglog.so"
          }, 
          "path_include": "/usr/include", 
          "ck_version": 10, 
          "full_path": "/usr/lib/arm-linux-gnueabihf/libglog.so", 
          "path_lib": "/usr/lib/arm-linux-gnueabihf"
        }, 
        "setup": {
          "version_split": [
            0
          ], 
          "target_os_bits": "32", 
          "version": "0", 
          "host_os_uoa": "fb525e34243f49c1", 
          "target_os_uoa": "fb525e34243f49c1"
        }, 
        "env_script": "env.sh", 
        "soft_uoa": "d42a1422abbcbb6a", 
        "env": {
          "CK_ENV_LIB_GLOG": "/usr", 
          "CK_ENV_LIB_GLOG_DYNAMIC_NAME": "libglog.so", 
          "CK_ENV_LIB_GLOG_LFLAG": "-lglog", 
          "CK_ENV_LIB_GLOG_STATIC_NAME": "libglog.a"
        }, 
        "soft_alias": "lib.glog"
      }, 
      "force_add_static_lib_path": "yes", 
      "local": "yes", 
      "ver": "0"
    }, 
    "lib-caffe": {
      "sort": 1, 
      "bat": ". /home/test/CK_REPOS/local/env/38405d9c8494a096/env.sh\n", 
      "ver": "trunk-e0f77c3", 
      "name": "Caffe library", 
      "tags": "lib,caffe,vopencl", 
      "num_entries": 1, 
      "choices": [
        "38405d9c8494a096"
      ], 
      "uoa": "38405d9c8494a096", 
      "dict": {
        "data_name": "BVLC Caffe framework (opencl,libdnn,clblast,tune)", 
        "deps": {
          "lib-viennacl": {
            "sort": 35, 
            "bat": ". /home/test/CK_REPOS/local/env/e1416780ff241cfb/env.sh\n", 
            "ver": "master-0d62d8e", 
            "name": "ViennaCL library", 
            "tags": "lib,viennacl,vcpu", 
            "skip_default": "yes", 
            "uoa": "e1416780ff241cfb", 
            "choices": [
              "e1416780ff241cfb"
            ], 
            "num_entries": 1, 
            "local": "yes"
          }, 
          "cmake": {
            "detected_ver": "3.5.1", 
            "sort": 5, 
            "bat": ". /home/test/CK_REPOS/local/env/62213716ad487a84/env.sh\n", 
            "ver": "3.5.1", 
            "name": "cmake", 
            "tags": "tool,cmake", 
            "build_dir_name": "cmake", 
            "uoa": "62213716ad487a84", 
            "choices": [
              "62213716ad487a84"
            ], 
            "num_entries": 1, 
            "dict": {
              "env_script": "env.sh", 
              "deps": {}, 
              "tags": [
                "32bits", 
                "cmake", 
                "host-os-linux-32", 
                "target-os-linux-32", 
                "tool", 
                "v3", 
                "v3.5", 
                "v3.5.1"
              ], 
              "customize": {
                "soft_version_cmd": {
                  "win": "--version > $#filename#$ 2>&1", 
                  "linux": "--version > $#filename#$ 2>&1"
                }, 
                "only_for_host_os_tags": [
                  "windows", 
                  "linux"
                ], 
                "build_dir_name": "cmake", 
                "full_path": "/usr/bin/cmake", 
                "skip_path": "yes", 
                "add_to_path": "yes", 
                "soft_file": {
                  "win": "cmake.exe", 
                  "linux": "cmake"
                }, 
                "version": "3.5.1", 
                "soft_file_from_host_os": "yes", 
                "add_only_with_version": "yes", 
                "version_split": [
                  3, 
                  5, 
                  1
                ], 
                "limit_recursion_dir_search": {
                  "win": 3, 
                  "linux": 3
                }, 
                "check_that_exists": "yes", 
                "soft_path_example": {
                  "win": "C:\\Program Files (x86)\\CMake\\bin\\cmake.exe", 
                  "linux": "/usr/bin/cmake"
                }, 
                "ck_version": 10, 
                "env_prefix": "CK_ENV_TOOL_CMAKE"
              }, 
              "setup": {
                "version_split": [
                  3, 
                  5, 
                  1
                ], 
                "target_os_bits": "32", 
                "version": "3.5.1", 
                "host_os_uoa": "fb525e34243f49c1", 
                "target_os_uoa": "fb525e34243f49c1"
              }, 
              "data_name": "cmake", 
              "soft_uoa": "77ef5e31404d9589", 
              "env": {
                "CK_ENV_TOOL_CMAKE_BIN": "/usr/bin", 
                "CK_ENV_TOOL_CMAKE": "/usr", 
                "CK_CMAKE": "cmake"
              }, 
              "soft_alias": "tool.cmake"
            }, 
            "skip_from_bat": "yes", 
            "local": "yes", 
            "force_target_as_host": "yes"
          }, 
          "lib-protobuf": {
            "skip_installed": {
              "win": "yes", 
              "android": "yes"
            }, 
            "sort": 110, 
            "name": "ProtoBuf library", 
            "tags": "lib,protobuf,v3.1.0", 
            "only_for_target_os_tags": [
              "android"
            ], 
            "local": "yes"
          }, 
          "lib-glog": {
            "skip_installed": {
              "win": "yes", 
              "android": "yes"
            }, 
            "sort": 14, 
            "bat": ". /home/test/CK_REPOS/local/env/6d794182a345dc6c/env.sh\n", 
            "ver": "0", 
            "name": "GLog library", 
            "tags": "lib,glog", 
            "uoa": "6d794182a345dc6c", 
            "choices": [
              "6d794182a345dc6c"
            ], 
            "num_entries": 1, 
            "dict": {
              "env_script": "env.sh", 
              "deps": {}, 
              "tags": [
                "32bits", 
                "glog", 
                "host-os-linux-32", 
                "lib", 
                "target-os-linux-32", 
                "v0"
              ], 
              "customize": {
                "dynamic_lib": "libglog.so", 
                "static_lib": "libglog.a", 
                "skip_path": "yes", 
                "soft_file": {
                  "win": "glog.lib", 
                  "linux": "libglog.so"
                }, 
                "version": "0", 
                "env_prefix": "CK_ENV_LIB_GLOG", 
                "limit_recursion_dir_search": {
                  "win": 3, 
                  "linux": 3
                }, 
                "version_split": [
                  0
                ], 
                "path_include": "/usr/include", 
                "check_that_exists": "yes", 
                "soft_path_example": {
                  "win": "", 
                  "linux": "/usr/lib/x86_64-linux-gnu/libglog.so"
                }, 
                "ck_version": 10, 
                "full_path": "/usr/lib/arm-linux-gnueabihf/libglog.so", 
                "path_lib": "/usr/lib/arm-linux-gnueabihf"
              }, 
              "setup": {
                "version_split": [
                  0
                ], 
                "target_os_bits": "32", 
                "version": "0", 
                "host_os_uoa": "fb525e34243f49c1", 
                "target_os_uoa": "fb525e34243f49c1"
              }, 
              "data_name": "GLog library", 
              "soft_uoa": "d42a1422abbcbb6a", 
              "env": {
                "CK_ENV_LIB_GLOG": "/usr", 
                "CK_ENV_LIB_GLOG_DYNAMIC_NAME": "libglog.so", 
                "CK_ENV_LIB_GLOG_LFLAG": "-lglog", 
                "CK_ENV_LIB_GLOG_STATIC_NAME": "libglog.a"
              }, 
              "soft_alias": "lib.glog"
            }, 
            "local": "yes"
          }, 
          "lib-gflags": {
            "skip_installed": {
              "win": "yes", 
              "android": "yes"
            }, 
            "sort": 12, 
            "bat": ". /home/test/CK_REPOS/local/env/1429ab9526e8076d/env.sh 1\n", 
            "ver": "2", 
            "name": "GFlags library", 
            "tags": "lib,gflags", 
            "local": "yes", 
            "uoa": "1429ab9526e8076d", 
            "choices": [
              "1429ab9526e8076d"
            ], 
            "num_entries": 1, 
            "update_tags_by_target_platform2": {
              "win": "v2.2.0", 
              "android": "v2.2.0"
            }, 
            "dict": {
              "env_script": "env.sh", 
              "deps": {}, 
              "tags": [
                "32bits", 
                "gflags", 
                "host-os-linux-32", 
                "lib", 
                "target-os-linux-32", 
                "v2"
              ], 
              "customize": {
                "dynamic_lib": "libgflags.so", 
                "static_lib": "libgflags.a", 
                "skip_path": "yes", 
                "soft_file": {
                  "win": "gflags.lib", 
                  "linux": "libgflags.so"
                }, 
                "version": "2", 
                "env_prefix": "CK_ENV_LIB_GFLAGS", 
                "limit_recursion_dir_search": {
                  "win": 3, 
                  "linux": 3
                }, 
                "version_split": [
                  2
                ], 
                "path_include": "/usr/include", 
                "check_that_exists": "yes", 
                "soft_path_example": {
                  "win": "", 
                  "linux": "/usr/lib/x86_64-linux-gnu/libgflags.so"
                }, 
                "ck_version": 10, 
                "full_path": "/usr/lib/arm-linux-gnueabihf/libgflags.so", 
                "path_lib": "/usr/lib/arm-linux-gnueabihf"
              }, 
              "setup": {
                "version_split": [
                  2
                ], 
                "target_os_bits": "32", 
                "version": "2", 
                "host_os_uoa": "fb525e34243f49c1", 
                "target_os_uoa": "fb525e34243f49c1"
              }, 
              "data_name": "GFlags library", 
              "soft_uoa": "64abac44465943ea", 
              "env": {
                "CK_ENV_LIB_GFLAGS": "/usr", 
                "CK_ENV_LIB_GFLAGS_DYNAMIC_NAME": "libgflags.so", 
                "CK_ENV_LIB_GFLAGS_STATIC_NAME": "libgflags.a", 
                "CK_ENV_LIB_GFLAGS_LFLAG": "-lgflags"
              }, 
              "soft_alias": "lib.gflags"
            }, 
            "force_env_init": "yes"
          }, 
          "lib-opencv": {
            "skip_installed": {
              "win": "yes", 
              "android": "yes"
            }, 
            "sort": 20, 
            "bat": ". /home/test/CK_REPOS/local/env/470eba29ef36bbe1/env.sh\n", 
            "ver": "2.4.9", 
            "name": "OpenCV library", 
            "tags": "lib,opencv", 
            "uoa": "470eba29ef36bbe1", 
            "choices": [
              "470eba29ef36bbe1"
            ], 
            "num_entries": 1, 
            "dict": {
              "env_script": "env.sh", 
              "deps": {}, 
              "tags": [
                "32bits", 
                "host-os-linux-32", 
                "lib", 
                "opencv", 
                "target-os-linux-32", 
                "v2", 
                "v2.4", 
                "v2.4.9"
              ], 
              "customize": {
                "path_static_lib": "/usr/lib/arm-linux-gnueabihf", 
                "dynamic_lib": "libopencv_core.so", 
                "env_prefix": "CK_ENV_LIB_OPENCV", 
                "skip_path": "yes", 
                "soft_file": {
                  "win": "opencv_annotation.exe", 
                  "linux": "libopencv_core.so"
                }, 
                "version": "2.4.9", 
                "soft_path_example": {
                  "linux": "/usr/lib/x86_64-linux-gnu/libopencv_core.so"
                }, 
                "path_lib": "/usr/lib/arm-linux-gnueabihf", 
                "version_split": [
                  2, 
                  4, 
                  9
                ], 
                "limit_recursion_dir_search": {
                  "win": 5, 
                  "linux": 4
                }, 
                "check_that_exists": "yes", 
                "path_dynamic_lib": "/usr/lib/arm-linux-gnueabihf", 
                "path_include": "/usr/include", 
                "ck_version": 10, 
                "full_path": "/usr/lib/arm-linux-gnueabihf/libopencv_core.so", 
                "extra_dynamic_libs": {
                  "opencv_highgui": "libopencv_highgui.so", 
                  "opencv_ocl": "libopencv_ocl.so", 
                  "opencv_imgproc": "libopencv_imgproc.so"
                }
              }, 
              "setup": {
                "version_split": [
                  2, 
                  4, 
                  9
                ], 
                "target_os_bits": "32", 
                "version": "2.4.9", 
                "host_os_uoa": "fb525e34243f49c1", 
                "target_os_uoa": "fb525e34243f49c1"
              }, 
              "data_name": "OpenCV library", 
              "soft_uoa": "18eb79fe079438fb", 
              "env": {
                "CK_ENV_LIB_OPENCV_LFLAG_HIGHGUI": "-lopencv_highgui", 
                "CK_ENV_LIB_OPENCV_LFLAG_IMGPROC": "-lopencv_imgproc", 
                "CK_ENV_LIB_OPENCV_DYNAMIC_LIB_PATH": "/usr/lib/arm-linux-gnueabihf", 
                "CK_ENV_LIB_OPENCV_LFLAG_CORE": "-lopencv_core", 
                "CK_ENV_LIB_OPENCV_STATIC_LIB_PATH": "/usr/lib/arm-linux-gnueabihf", 
                "CK_ENV_LIB_OPENCV": "/usr"
              }, 
              "soft_alias": "lib.opencv"
            }, 
            "local": "yes"
          }, 
          "lib-protobuf-host": {
            "skip_installed": {
              "win": "yes", 
              "android": "yes"
            }, 
            "sort": 115, 
            "bat": ". /home/test/CK_REPOS/local/env/d92fb4db3bba3e65/env.sh\n", 
            "ver": "api-9.0.1", 
            "name": "ProtoBuf host compiler", 
            "tags": "lib,protobuf-host", 
            "uoa": "d92fb4db3bba3e65", 
            "choices": [
              "d92fb4db3bba3e65"
            ], 
            "num_entries": 1, 
            "dict": {
              "env_script": "env.sh", 
              "deps": {}, 
              "tags": [
                "32bits", 
                "host-os-linux-32", 
                "lib", 
                "protobuf-host", 
                "target-os-linux-32", 
                "v0", 
                "v0.9", 
                "v0.9.0", 
                "v0.9.0.1"
              ], 
              "customize": {
                "dynamic_lib": "libprotobuf.so", 
                "static_lib": "libprotobuf.a", 
                "env_prefix": "CK_ENV_LIB_PROTOBUF_HOST", 
                "skip_path": "yes", 
                "soft_file": {
                  "linux": "libprotobuf.so"
                }, 
                "version": "api-9.0.1", 
                "path_bin": "/usr/bin", 
                "limit_recursion_dir_search": {
                  "linux": 3
                }, 
                "version_split": [
                  0, 
                  9, 
                  0, 
                  1
                ], 
                "path_include": "/usr/include", 
                "check_that_exists": "yes", 
                "soft_path_example": {
                  "linux": ""
                }, 
                "ck_version": 10, 
                "full_path": "/usr/lib/arm-linux-gnueabihf/libprotobuf.so", 
                "path_lib": "/usr/lib/arm-linux-gnueabihf"
              }, 
              "setup": {
                "version_split": [
                  0, 
                  9, 
                  0, 
                  1
                ], 
                "target_os_bits": "32", 
                "version": "api-9.0.1", 
                "host_os_uoa": "fb525e34243f49c1", 
                "target_os_uoa": "fb525e34243f49c1"
              }, 
              "data_name": "ProtoBuf host library", 
              "soft_uoa": "57c5f409aaf1ceed", 
              "env": {
                "CK_ENV_LIB_PROTOBUF_HOST_LFLAG": "-lprotobuf", 
                "CK_ENV_LIB_PROTOBUF_HOST": "/usr", 
                "CK_ENV_LIB_PROTOBUF_HOST_DYNAMIC_NAME": "libprotobuf.so", 
                "CK_ENV_LIB_PROTOBUF_HOST_STATIC_NAME": "libprotobuf.a", 
                "CK_ENV_LIB_PROTOBUF_HOST_SRC_DIR": "/usr/"
              }, 
              "soft_alias": "lib.protobuf.host"
            }, 
            "local": "yes", 
            "force_target_as_host": "yes"
          }, 
          "lib-opencl": {
            "skip_installed": {
              "android": "yes"
            }, 
            "sort": 11, 
            "bat": ". /home/test/CK_REPOS/local/env/b8b9f260739115c1/env.sh\n", 
            "ver": "v3", 
            "name": "OpenCL stubs library", 
            "tags": "lib,opencl", 
            "uoa": "b8b9f260739115c1", 
            "choices": [
              "b8b9f260739115c1"
            ], 
            "num_entries": 1, 
            "dict": {
              "env_script": "env.sh", 
              "deps": {}, 
              "tags": [
                "32bits", 
                "host-os-linux-32", 
                "lib", 
                "opencl", 
                "target-os-linux-32", 
                "v0"
              ], 
              "customize": {
                "dynamic_lib": "libOpenCL.so", 
                "static_lib": "libOpenCL.so", 
                "env_prefix": "CK_ENV_LIB_OPENCL", 
                "skip_path": "yes", 
                "soft_file": {
                  "win": "OpenCL.lib", 
                  "linux": "libOpenCL.so"
                }, 
                "include_name": "CL/opencl.h", 
                "version": "v3", 
                "path_bin": "/usr/bin", 
                "limit_recursion_dir_search": {
                  "win": 4, 
                  "linux": 4
                }, 
                "version_split": [
                  0
                ], 
                "path_include": "/usr/include", 
                "check_that_exists": "yes", 
                "soft_path_example": {
                  "win": "C:\\Program Files (x86)\\Intel\\OpenCL SDK\\4.6\\lib\\x64\\OpenCL.lib", 
                  "linux": "/usr/lib/libOpenCL.so"
                }, 
                "ck_version": 10, 
                "full_path": "/usr/lib/arm-linux-gnueabihf/libOpenCL.so", 
                "path_lib": "/usr/lib/arm-linux-gnueabihf"
              }, 
              "setup": {
                "version_split": [
                  0
                ], 
                "target_os_bits": "32", 
                "version": "v3", 
                "host_os_uoa": "fb525e34243f49c1", 
                "target_os_uoa": "fb525e34243f49c1"
              }, 
              "data_name": "OpenCL library", 
              "soft_uoa": "6eb9a57038688ad3", 
              "env": {
                "CK_ENV_LIB_OPENCL_DYNAMIC_NAME": "libOpenCL.so", 
                "CK_ENV_LIB_OPENCL_INCLUDE_NAME": "CL/opencl.h", 
                "CK_ENV_LIB_OPENCL_STATIC_NAME": "libOpenCL.so", 
                "CK_ENV_LIB_OPENCL": "/usr"
              }, 
              "soft_alias": "lib.opencl"
            }, 
            "local": "yes"
          }, 
          "lib-blas": {
            "sort": 30, 
            "bat": ". /home/test/CK_REPOS/local/env/a00786622dd644dd/env.sh\n", 
            "ver": "0.2.19-85636ff", 
            "name": "BLAS library", 
            "tags": "lib,blas,openblas", 
            "skip_default": "yes", 
            "uoa": "a00786622dd644dd", 
            "choices": [
              "a00786622dd644dd"
            ], 
            "num_entries": 1, 
            "local": "yes"
          }, 
          "lib-hdf5": {
            "skip_installed": {
              "win": "yes"
            }, 
            "sort": 19, 
            "bat": ". /home/test/CK_REPOS/local/env/4a8fb111be893a84/env.sh\n", 
            "ver": "1.8.16", 
            "name": "HDF5 library", 
            "tags": "lib,hdf5", 
            "uoa": "4a8fb111be893a84", 
            "only_for_target_os_tags": [
              "linux", 
              "windows"
            ], 
            "choices": [
              "4a8fb111be893a84"
            ], 
            "num_entries": 1, 
            "dict": {
              "env_script": "env.sh", 
              "deps": {}, 
              "tags": [
                "32bits", 
                "hdf5", 
                "host-os-linux-32", 
                "lib", 
                "target-os-linux-32", 
                "v1", 
                "v1.8", 
                "v1.8.16"
              ], 
              "customize": {
                "include_file": "hdf5.h", 
                "dynamic_lib": "libhdf5.a", 
                "static_lib": "libhdf5.so", 
                "skip_path": "yes", 
                "soft_file": {
                  "linux": "libhdf5.so"
                }, 
                "include_name": "hdf5.h", 
                "version": "1.8.16", 
                "env_prefix": "CK_ENV_LIB_HDF5", 
                "limit_recursion_dir_search": {
                  "linux": 6
                }, 
                "version_split": [
                  1, 
                  8, 
                  16
                ], 
                "path_include": "/usr/include/hdf5/serial", 
                "check_that_exists": "yes", 
                "soft_path_example": {
                  "linux": "/usr/lib/x86_64-linux-gnu/hdf5/serial/libhdf5.so"
                }, 
                "ck_version": 10, 
                "full_path": "/usr/lib/arm-linux-gnueabihf/hdf5/serial/libhdf5.so", 
                "path_lib": "/usr/lib/arm-linux-gnueabihf/hdf5/serial"
              }, 
              "setup": {
                "version_split": [
                  1, 
                  8, 
                  16
                ], 
                "target_os_bits": "32", 
                "version": "1.8.16", 
                "host_os_uoa": "fb525e34243f49c1", 
                "target_os_uoa": "fb525e34243f49c1"
              }, 
              "data_name": "HDF5 library", 
              "soft_uoa": "6d0c245e881231e8", 
              "env": {
                "CK_ENV_LIB_HDF5_STATIC_NAME": "libhdf5.so", 
                "CK_ENV_LIB_HDF5": "/usr/include/hdf5", 
                "CK_ENV_LIB_HDF5_DYNAMIC_NAME": "libhdf5.a", 
                "CK_ENV_LIB_HDF5_INCLUDE_NAME": "hdf5.h"
              }, 
              "soft_alias": "lib.hdf5"
            }, 
            "local": "yes"
          }, 
          "lib-clblast": {
            "sort": 40, 
            "bat": ". /home/test/CK_REPOS/local/env/7b3dc4b4574975b7/env.sh\n", 
            "ver": "0.11.0-953a5a9", 
            "name": "CLBlast library", 
            "tags": "lib,clblast,tune", 
            "skip_default": "yes", 
            "uoa": "7b3dc4b4574975b7", 
            "choices": [
              "7b3dc4b4574975b7"
            ], 
            "num_entries": 1, 
            "local": "yes"
          }, 
          "lib-lmdb": {
            "sort": 18, 
            "bat": ". /home/test/CK_REPOS/local/env/aa675527c7942409/env.sh\n", 
            "ver": "0.0.0", 
            "name": "LMDB library", 
            "tags": "lib,lmdb", 
            "uoa": "aa675527c7942409", 
            "only_for_target_os_tags": [
              "linux", 
              "windows"
            ], 
            "choices": [
              "aa675527c7942409"
            ], 
            "num_entries": 1, 
            "dict": {
              "env_script": "env.sh", 
              "deps": {}, 
              "tags": [
                "32bits", 
                "host-os-linux-32", 
                "lib", 
                "lmdb", 
                "target-os-linux-32", 
                "v0", 
                "v0.0", 
                "v0.0.0"
              ], 
              "customize": {
                "path_include": "/usr/include", 
                "static_lib": "liblmdb.a", 
                "skip_path": "yes", 
                "soft_file": {
                  "win": "lmdb.lib", 
                  "linux": "liblmdb.so"
                }, 
                "version": "0.0.0", 
                "env_prefix": "CK_ENV_LIB_LMDB", 
                "version_split": [
                  0, 
                  0, 
                  0
                ], 
                "limit_recursion_dir_search": {
                  "win": 3, 
                  "linux": 3
                }, 
                "check_that_exists": "yes", 
                "soft_path_example": {
                  "win": "", 
                  "linux": "/usr/lib/liblmdb.so"
                }, 
                "ck_version": 10, 
                "full_path": "/usr/lib/arm-linux-gnueabihf/liblmdb.so", 
                "path_lib": "/usr/lib/arm-linux-gnueabihf"
              }, 
              "setup": {
                "version_split": [
                  0, 
                  0, 
                  0
                ], 
                "target_os_bits": "32", 
                "version": "0.0.0", 
                "host_os_uoa": "fb525e34243f49c1", 
                "target_os_uoa": "fb525e34243f49c1"
              }, 
              "data_name": "LMDB library", 
              "soft_uoa": "a249f58927ceefa5", 
              "env": {
                "CK_ENV_LIB_LMDB_STATIC_NAME": "liblmdb.a", 
                "CK_ENV_LIB_LMDB": "/usr"
              }, 
              "soft_alias": "lib.lmdb"
            }, 
            "local": "yes"
          }, 
          "lib-boost": {
            "skip_installed": {
              "win": "yes", 
              "android": "yes"
            }, 
            "sort": 25, 
            "bat": ". /home/test/CK_REPOS/local/env/d3b0a48d7954582d/env.sh\n", 
            "ver": "1.58.0", 
            "name": "Boost library", 
            "tags": "lib,boost", 
            "uoa": "d3b0a48d7954582d", 
            "choices": [
              "d3b0a48d7954582d"
            ], 
            "num_entries": 1, 
            "dict": {
              "env_script": "env.sh", 
              "deps": {}, 
              "tags": [
                "32bits", 
                "boost", 
                "host-os-linux-32", 
                "lib", 
                "target-os-linux-32", 
                "v1", 
                "v1.58", 
                "v1.58.0"
              ], 
              "customize": {
                "path_include": "/usr/include", 
                "skip_path": "yes", 
                "soft_file": {
                  "win": "libboost_system.lib", 
                  "linux": "libboost_system.so"
                }, 
                "version": "1.58.0", 
                "env_prefix": "CK_ENV_LIB_BOOST", 
                "version_split": [
                  1, 
                  58, 
                  0
                ], 
                "limit_recursion_dir_search": {
                  "win": 3, 
                  "linux": 3
                }, 
                "check_that_exists": "yes", 
                "soft_path_example": {
                  "win": "", 
                  "linux": "/usr/lib/x86_64-linux-gnu/libboost_system.so"
                }, 
                "ck_version": 10, 
                "full_path": "/usr/lib/arm-linux-gnueabihf/libboost_system.so", 
                "path_lib": "/usr/lib/arm-linux-gnueabihf"
              }, 
              "setup": {
                "version_split": [
                  1, 
                  58, 
                  0
                ], 
                "target_os_bits": "32", 
                "version": "1.58.0", 
                "host_os_uoa": "fb525e34243f49c1", 
                "target_os_uoa": "fb525e34243f49c1"
              }, 
              "data_name": "Boost library", 
              "soft_uoa": "23949f2a32490faf", 
              "env": {
                "CK_ENV_LIB_BOOST_LFLAG_FILESYSTEM": "-lboost_filesystem", 
                "CK_ENV_LIB_BOOST_LFLAG_THREAD": "-lboost_thread", 
                "CK_ENV_LIB_BOOST_LFLAG_SYSTEM": "-lboost_system", 
                "CK_ENV_LIB_BOOST_LFLAG_DATE_TIME": "-lboost_date_time", 
                "CK_ENV_LIB_BOOST": "/usr"
              }, 
              "soft_alias": "lib.boost"
            }, 
            "local": "yes"
          }, 
          "compiler": {
            "detected_ver": "5.4.0", 
            "sort": 10, 
            "bat": ". /home/test/CK_REPOS/local/env/42cc5e14c1e9955f/env.sh\n", 
            "ver": "5.4.0", 
            "name": "C++ compiler", 
            "tags": "compiler,lang-cpp", 
            "build_dir_name": "gcc", 
            "uoa": "42cc5e14c1e9955f", 
            "choices": [
              "42cc5e14c1e9955f"
            ], 
            "num_entries": 1, 
            "update_tags_by_target_platform2": {
              "win": "mcl", 
              "android": "gcc", 
              "linux": "gcc"
            }, 
            "dict": {
              "env_script": "env.sh", 
              "deps": {}, 
              "tags": [
                "32bits", 
                "compiler", 
                "gcc", 
                "host-os-linux-32", 
                "lang-c", 
                "lang-cpp", 
                "target-os-linux-32", 
                "v5", 
                "v5.4", 
                "v5.4.0"
              ], 
              "customize": {
                "can_strip_dynamic_lib": "yes", 
                "build_dir_name": "gcc", 
                "skip_path": "yes", 
                "tool_prefix_configured": "yes", 
                "tool_prefix": "", 
                "tool_postfix_configured": "yes", 
                "env_prefix": "CK_ENV_COMPILER_GCC", 
                "soft_version_cmd": {
                  "win": " --version > $#filename#$ 2>&1", 
                  "linux": "--version > $#filename#$ 2>&1"
                }, 
                "soft_path_example": {
                  "win": "C:\\Program Files\\GCC-4.9.2-x64\\bin\\gcc.exe", 
                  "linux": "/usr/bin/gcc"
                }, 
                "languages": [
                  "C", 
                  "CPP"
                ], 
                "version": "5.4.0", 
                "soft_file_from_host_os": "yes", 
                "tool_postfix": "", 
                "soft_file": {
                  "win": "gcc.exe", 
                  "linux": "gcc"
                }, 
                "retarget": "no", 
                "search_numeric_ext_on_linux": "yes", 
                "add_m32": "yes", 
                "add_to_path": "yes", 
                "add_only_with_version": "yes", 
                "version_split": [
                  5, 
                  4, 
                  0
                ], 
                "limit_recursion_dir_search": {
                  "win": 4, 
                  "linux": 3
                }, 
                "check_that_exists": "yes", 
                "ck_version": 10, 
                "only_for_target_os_tags": [
                  "mingw", 
                  "windows", 
                  "linux"
                ], 
                "full_path": "/usr/bin/gcc"
              }, 
              "setup": {
                "version_split": [
                  5, 
                  4, 
                  0
                ], 
                "target_os_bits": "32", 
                "version": "5.4.0", 
                "host_os_uoa": "fb525e34243f49c1", 
                "target_os_uoa": "fb525e34243f49c1"
              }, 
              "data_name": "GNU C compiler", 
              "soft_uoa": "3a8a82fa40bf992d", 
              "env": {
                "CK_FLAGS_DYNAMIC_BIN": " ", 
                "CK_COMPILER_FLAGS_OBLIGATORY": "", 
                "CK_AR": "ar", 
                "CK_COMPILER_POSTFIX": "", 
                "CK_PROFILER": "gprof", 
                "CK_COMPILER_TOOLCHAIN_NAME": "gcc", 
                "CK_LIB_EXT": ".a", 
                "CK_OPT_SIZE": "-Os", 
                "CK_OPT_SPEED": "-O3", 
                "CK_COMPILER_FLAG_PTHREAD_LIB": "-lpthread", 
                "CK_CC": "gcc", 
                "CK_RANLIB": "ranlib", 
                "CK_EXE_EXT": ".out", 
                "CK_COMPILER_FLAG_GPROF": "-pg", 
                "CK_OPT_ALL_WARNINGS": "-Wall", 
                "CK_LB_OUTPUT": "-o ", 
                "CK_FLAGS_STATIC_LIB": "-fPIC", 
                "CK_FLAG_PREFIX_VAR": "-D", 
                "CK_COMPILER_FLAG_STD90": "-std=c90", 
                "CK_EXTRA_LIB_M": "-lm", 
                "CK_COMPILER_FLAG_STD99": "-std=c99", 
                "CK_FLAG_PREFIX_LIB_DIR": "-L", 
                "CK_FLAGS_CREATE_OBJ": "-c", 
                "CK_LINKER_FLAG_OPENMP": "-lgomp -lrt", 
                "CK_OPT_UNWIND": " ", 
                "CK_OBJ_EXT": ".o", 
                "CK_FLAGS_OUTPUT": "-o ", 
                "CK_LB": "ar rcs", 
                "CK_LD": "ld", 
                "CK_COMPILER_FLAG_CPP11": "-std=c++11", 
                "CK_COMPILER_FLAG_OPENMP": "-fopenmp", 
                "CK_PLUGIN_FLAG": "-fplugin=", 
                "CK_DLL_EXT": ".so", 
                "CK_CXX": "g++", 
                "CK_ASM_EXT": ".s", 
                "CK_FLAG_PREFIX_INCLUDE": "-I", 
                "CK_LD_FLAGS_EXTRA": "", 
                "CK_OBJDUMP": "objdump -d", 
                "CK_OPT_SPEED_SAFE": "-O2", 
                "CK_FLAGS_DLL_EXTRA": "", 
                "CK_FLAGS_DLL": "-shared -fPIC", 
                "CK_FLAGS_STATIC_BIN": "-static -fPIC", 
                "CK_ENV_COMPILER_GCC": "/usr", 
                "CK_EXTRA_LIB_DL": "-ldl", 
                "CK_GPROF_OUT_FILE": "gmon.out", 
                "CK_MAKE": "make", 
                "CK_COMPILER_FLAG_CPP0X": "-std=c++0x", 
                "CK_COMPILER_FLAG_PLUGIN": "-fplugin=", 
                "CK_FLAGS_CREATE_ASM": "-S"
              }, 
              "soft_alias": "compiler.gcc"
            }, 
            "local": "yes"
          }
        }, 
        "tags": [
          "32bits", 
          "bvlc", 
          "caffe", 
          "host-os-linux-32", 
          "lib", 
          "target-os-linux-32", 
          "v0", 
          "v0.0", 
          "vclblast", 
          "vlibdnn", 
          "vmaster", 
          "vopencl", 
          "vtune"
        ], 
        "customize": {
          "git_src_dir": "src", 
          "use_git_revision": "yes", 
          "skip_path": "yes", 
          "extra_dir": "", 
          "env_prefix": "CK_ENV_LIB_CAFFE", 
          "used_package_uid": "d53e4ec2b0db1b5d", 
          "used_package_uoa": "lib-caffe-bvlc-opencl-libdnn-clblast-universal-tune", 
          "package_extra_name": " (opencl,libdnn,clblast,tune)", 
          "static_lib": "libcaffe.a", 
          "version": "trunk-e0f77c3", 
          "params": {
            "use_greentea": 1, 
            "viennacl_debug": 0, 
            "cpu_only": 0, 
            "use_clblas": 0, 
            "use_lmdb": 1, 
            "use_clblast": 1, 
            "use_leveldb": 1, 
            "use_cuda": 0, 
            "debug": 0, 
            "use_opencv": 1, 
            "use_libdnn": 1
          }, 
          "path_lib": "/home/test/CK_TOOLS/lib-caffe-bvlc-opencl-libdnn-clblast-tune-trunk-gcc-5.4.0-linux-32/install/lib", 
          "install_env": {
            "BUILD_MATLAB": 0, 
            "CMAKE_BUILD_SHARED_LIBS": 0, 
            "PACKAGE_URL_WINDOWS": "https://github.com/BVLC/caffe", 
            "PACKAGE_SKIP_CLEAN_INSTALL": "NO", 
            "USE_GREENTEA": 1, 
            "PACKAGE_SUB_DIR": "src", 
            "USE_FFT": 0, 
            "DISABLE_DOUBLE_SUPPORT": "OFF", 
            "USE_LEVELDB": "ON", 
            "PACKAGE_GIT_CHECKOUT_ANDROID": "opencl", 
            "CPU_ONLY": 1, 
            "RUN_LINT": 0, 
            "DISABLE_DEVICE_HOST_UNIFIED_MEMORY": "OFF", 
            "USE_NCCL": 0, 
            "CAFFE_BUILD_PYTHON": "OFF", 
            "RUN_INSTALL": 0, 
            "PACKAGE_URL_ANDROID": "https://github.com/BVLC/caffe", 
            "USE_CUDNN": 0, 
            "WITH_NINJA": 0, 
            "USE_ISAAC": 0, 
            "PACKAGE_GIT_CHECKOUT_WINDOWS": "opencl", 
            "PACKAGE_GIT_CHECKOUT_LINUX": "opencl", 
            "PACKAGE_SKIP_CLEAN_OBJ": "YES", 
            "BUILD_PYTHON_LAYER": 0, 
            "BUILD_PYTHON": 0, 
            "CMAKE_CONFIG": "Release", 
            "RUN_TESTS": 0, 
            "PYTHON_EXE": "python", 
            "PACKAGE_SKIP_BUILD_ERROR": "YES", 
            "USE_CLBLAST": 1, 
            "USE_INTEL_SPATIAL": "OFF", 
            "USE_CUDA": 0, 
            "PACKAGE_PATCH": "YES", 
            "PACKAGE_COPY": "NO", 
            "USE_PREBUILT_DEPENDENCIES": "OFF", 
            "BLAS_TYPE": "Open", 
            "USE_CLBLAS": 0, 
            "PACKAGE_URL_LINUX": "https://github.com/BVLC/caffe", 
            "PACKAGE_SUB_DIR1": "src", 
            "PACKAGE_CONFIGURE_FLAGS": "", 
            "PACKAGE_BUILD_TYPE": "cmake", 
            "PACKAGE_GIT": "YES", 
            "PACKAGE_SKIP_CLEAN_SRC_DIR": "NO", 
            "USE_LMDB": "ON", 
            "USE_LIBDNN": 1
          }, 
          "soft_file": {
            "win": "caffe.exe", 
            "linux": "libcaffe.so"
          }, 
          "path_bin": "/home/test/CK_TOOLS/lib-caffe-bvlc-opencl-libdnn-clblast-tune-trunk-gcc-5.4.0-linux-32/install/bin", 
          "git_info": {
            "revision": "e0f77c3", 
            "iso_datetime_cut": "20170517", 
            "iso_datetime_cut_revision": "20170517-e0f77c3", 
            "iso_datetime": "2017-05-17T16:23:10", 
            "datetime": "Wed May 17 16:23:10 2017 +0200"
          }, 
          "version_split": [
            0, 
            0
          ], 
          "limit_recursion_dir_search": {
            "win": 4, 
            "linux": 4
          }, 
          "check_that_exists": "yes", 
          "ck_version": 10, 
          "dynamic_lib": "libcaffe.so", 
          "path_include": "/home/test/CK_TOOLS/lib-caffe-bvlc-opencl-libdnn-clblast-tune-trunk-gcc-5.4.0-linux-32/install/include", 
          "full_path": "/home/test/CK_TOOLS/lib-caffe-bvlc-opencl-libdnn-clblast-tune-trunk-gcc-5.4.0-linux-32/install/bin/caffe"
        }, 
        "setup": {
          "deps_lib-opencl": "b8b9f260739115c1", 
          "deps_lib-viennacl": "e1416780ff241cfb", 
          "deps_compiler": "42cc5e14c1e9955f", 
          "deps_lib-blas": "a00786622dd644dd", 
          "deps_lib-gflags": "1429ab9526e8076d", 
          "deps_lib-protobuf-host": "d92fb4db3bba3e65", 
          "deps_cmake": "62213716ad487a84", 
          "target_os_uoa": "fb525e34243f49c1", 
          "deps_lib-clblast": "7b3dc4b4574975b7", 
          "deps_lib-glog": "6d794182a345dc6c", 
          "deps_lib-boost": "d3b0a48d7954582d", 
          "version": "trunk-e0f77c3", 
          "deps_lib-lmdb": "aa675527c7942409", 
          "version_split": [
            0, 
            0
          ], 
          "target_os_bits": "32", 
          "host_os_uoa": "fb525e34243f49c1", 
          "deps_lib-hdf5": "4a8fb111be893a84", 
          "deps_lib-opencv": "470eba29ef36bbe1"
        }, 
        "env_script": "env.sh", 
        "package_uoa": "d53e4ec2b0db1b5d", 
        "soft_uoa": "04ab08137582bd03", 
        "env": {
          "CK_CAFFE_CLASSIFICATION_BIN": "classification", 
          "CK_ENV_LIB_CAFFE": "/home/test/CK_TOOLS/lib-caffe-bvlc-opencl-libdnn-clblast-tune-trunk-gcc-5.4.0-linux-32/install", 
          "CK_ENV_LIB_CAFFE_PYTHON": "/home/test/CK_TOOLS/lib-caffe-bvlc-opencl-libdnn-clblast-tune-trunk-gcc-5.4.0-linux-32/install/python", 
          "CK_ENV_LIB_CAFFE_EXTRA_INCLUDE": "/home/test/CK_TOOLS/lib-caffe-bvlc-opencl-libdnn-clblast-tune-trunk-gcc-5.4.0-linux-32/install/.build_release/src", 
          "CK_ENV_LIB_CAFFE_STATIC_NAME": "libcaffe.a", 
          "CK_CAFFE_BIN": "caffe", 
          "CK_ENV_LIB_CAFFE_DYNAMIC_NAME": "libcaffe.so", 
          "CAFFE_INSTALL_DIR": "/home/test/CK_TOOLS/lib-caffe-bvlc-opencl-libdnn-clblast-tune-trunk-gcc-5.4.0-linux-32/install"
        }, 
        "soft_alias": "lib.caffe"
      }, 
      "local": "yes", 
      "skip_pruning_by_other_deps": "yes"
    }, 
    "lib-protobuf-host": {
      "sort": 9, 
      "bat": ". /home/test/CK_REPOS/local/env/d92fb4db3bba3e65/env.sh\n", 
      "cus": {
        "dynamic_lib": "libprotobuf.so", 
        "static_lib": "libprotobuf.a", 
        "env_prefix": "CK_ENV_LIB_PROTOBUF_HOST", 
        "skip_path": "yes", 
        "soft_file": {
          "linux": "libprotobuf.so"
        }, 
        "version": "api-9.0.1", 
        "path_bin": "/usr/bin", 
        "version_split": [
          0, 
          9, 
          0, 
          1
        ], 
        "limit_recursion_dir_search": {
          "linux": 3
        }, 
        "check_that_exists": "yes", 
        "soft_path_example": {
          "linux": ""
        }, 
        "path_include": "/usr/include", 
        "ck_version": 10, 
        "full_path": "/usr/lib/arm-linux-gnueabihf/libprotobuf.so", 
        "path_lib": "/usr/lib/arm-linux-gnueabihf"
      }, 
      "name": "ProtoBuf HOST library", 
      "tags": "lib,protobuf-host", 
      "num_entries": 2, 
      "only_for_target_os_tags": [
        "windows", 
        "linux"
      ], 
      "choices": [
        "b2952754122a17d4", 
        "d92fb4db3bba3e65"
      ], 
      "uoa": "d92fb4db3bba3e65", 
      "dict": {
        "data_name": "ProtoBuf host library", 
        "deps": {}, 
        "tags": [
          "32bits", 
          "host-os-linux-32", 
          "lib", 
          "protobuf-host", 
          "target-os-linux-32", 
          "v0", 
          "v0.9", 
          "v0.9.0", 
          "v0.9.0.1"
        ], 
        "customize": {
          "dynamic_lib": "libprotobuf.so", 
          "static_lib": "libprotobuf.a", 
          "env_prefix": "CK_ENV_LIB_PROTOBUF_HOST", 
          "skip_path": "yes", 
          "soft_file": {
            "linux": "libprotobuf.so"
          }, 
          "version": "api-9.0.1", 
          "path_bin": "/usr/bin", 
          "version_split": [
            0, 
            9, 
            0, 
            1
          ], 
          "limit_recursion_dir_search": {
            "linux": 3
          }, 
          "check_that_exists": "yes", 
          "soft_path_example": {
            "linux": ""
          }, 
          "path_include": "/usr/include", 
          "ck_version": 10, 
          "full_path": "/usr/lib/arm-linux-gnueabihf/libprotobuf.so", 
          "path_lib": "/usr/lib/arm-linux-gnueabihf"
        }, 
        "setup": {
          "version_split": [
            0, 
            9, 
            0, 
            1
          ], 
          "target_os_bits": "32", 
          "version": "api-9.0.1", 
          "host_os_uoa": "fb525e34243f49c1", 
          "target_os_uoa": "fb525e34243f49c1"
        }, 
        "env_script": "env.sh", 
        "soft_uoa": "57c5f409aaf1ceed", 
        "env": {
          "CK_ENV_LIB_PROTOBUF_HOST_LFLAG": "-lprotobuf", 
          "CK_ENV_LIB_PROTOBUF_HOST": "/usr", 
          "CK_ENV_LIB_PROTOBUF_HOST_DYNAMIC_NAME": "libprotobuf.so", 
          "CK_ENV_LIB_PROTOBUF_HOST_STATIC_NAME": "libprotobuf.a", 
          "CK_ENV_LIB_PROTOBUF_HOST_SRC_DIR": "/usr/"
        }, 
        "soft_alias": "lib.protobuf.host"
      }, 
      "ver": "api-9.0.1", 
      "local": "yes"
    }, 
    "xopenme": {
      "sort": 100, 
      "bat": ". /home/test/CK_REPOS/local/env/c791495289203502/env.sh\n", 
      "cus": {
        "used_package_uid": "0573487b8121d094", 
        "used_package_uoa": "0573487b8121d094", 
        "dynamic_lib": "librtlxopenme.so", 
        "static_lib": "librtlxopenme.a", 
        "skip_path": "yes", 
        "path_include": "/home/test/CK_TOOLS/lib-rtl-xopenme-0.3-gcc-5.4.0-linux-32/include", 
        "include_name": "xopenme.h", 
        "version": "0.3", 
        "env_prefix": "CK_ENV_LIB_RTL_XOPENME", 
        "extra_dir": "", 
        "version_split": [
          0, 
          3
        ], 
        "full_path": "/home/test/CK_TOOLS/lib-rtl-xopenme-0.3-gcc-5.4.0-linux-32/lib/librtlxopenme.a", 
        "path_lib": "/home/test/CK_TOOLS/lib-rtl-xopenme-0.3-gcc-5.4.0-linux-32/lib"
      }, 
      "name": "xOpenME library", 
      "tags": "lib,xopenme", 
      "num_entries": 1, 
      "choices": [
        "c791495289203502"
      ], 
      "uoa": "c791495289203502", 
      "dict": {
        "data_name": "xOpenME run-time library", 
        "deps": {
          "compiler": {
            "detected_ver": "5.4.0", 
            "sort": 0, 
            "bat": ". /home/test/CK_REPOS/local/env/42cc5e14c1e9955f/env.sh\n", 
            "cus": {
              "can_strip_dynamic_lib": "yes", 
              "build_dir_name": "gcc", 
              "skip_path": "yes", 
              "tool_prefix_configured": "yes", 
              "tool_prefix": "", 
              "tool_postfix_configured": "yes", 
              "env_prefix": "CK_ENV_COMPILER_GCC", 
              "soft_version_cmd": {
                "win": " --version > $#filename#$ 2>&1", 
                "linux": "--version > $#filename#$ 2>&1"
              }, 
              "soft_path_example": {
                "win": "C:\\Program Files\\GCC-4.9.2-x64\\bin\\gcc.exe", 
                "linux": "/usr/bin/gcc"
              }, 
              "languages": [
                "C", 
                "CPP"
              ], 
              "version": "5.4.0", 
              "soft_file_from_host_os": "yes", 
              "tool_postfix": "", 
              "soft_file": {
                "win": "gcc.exe", 
                "linux": "gcc"
              }, 
              "retarget": "no", 
              "search_numeric_ext_on_linux": "yes", 
              "add_m32": "yes", 
              "add_to_path": "yes", 
              "add_only_with_version": "yes", 
              "version_split": [
                5, 
                4, 
                0
              ], 
              "limit_recursion_dir_search": {
                "win": 4, 
                "linux": 3
              }, 
              "check_that_exists": "yes", 
              "ck_version": 10, 
              "only_for_target_os_tags": [
                "mingw", 
                "windows", 
                "linux"
              ], 
              "full_path": "/usr/bin/gcc"
            }, 
            "name": "C++ compiler", 
            "tags": "compiler,lang-cpp", 
            "build_dir_name": "gcc", 
            "uoa": "42cc5e14c1e9955f", 
            "choices": [
              "42cc5e14c1e9955f"
            ], 
            "num_entries": 1, 
            "dict": {
              "env_script": "env.sh", 
              "deps": {}, 
              "tags": [
                "32bits", 
                "compiler", 
                "gcc", 
                "host-os-linux-32", 
                "lang-c", 
                "lang-cpp", 
                "target-os-linux-32", 
                "v5", 
                "v5.4", 
                "v5.4.0"
              ], 
              "customize": {
                "can_strip_dynamic_lib": "yes", 
                "build_dir_name": "gcc", 
                "skip_path": "yes", 
                "tool_prefix_configured": "yes", 
                "tool_prefix": "", 
                "tool_postfix_configured": "yes", 
                "env_prefix": "CK_ENV_COMPILER_GCC", 
                "soft_version_cmd": {
                  "win": " --version > $#filename#$ 2>&1", 
                  "linux": "--version > $#filename#$ 2>&1"
                }, 
                "soft_path_example": {
                  "win": "C:\\Program Files\\GCC-4.9.2-x64\\bin\\gcc.exe", 
                  "linux": "/usr/bin/gcc"
                }, 
                "languages": [
                  "C", 
                  "CPP"
                ], 
                "version": "5.4.0", 
                "soft_file_from_host_os": "yes", 
                "tool_postfix": "", 
                "soft_file": {
                  "win": "gcc.exe", 
                  "linux": "gcc"
                }, 
                "retarget": "no", 
                "search_numeric_ext_on_linux": "yes", 
                "add_m32": "yes", 
                "add_to_path": "yes", 
                "add_only_with_version": "yes", 
                "version_split": [
                  5, 
                  4, 
                  0
                ], 
                "limit_recursion_dir_search": {
                  "win": 4, 
                  "linux": 3
                }, 
                "check_that_exists": "yes", 
                "ck_version": 10, 
                "only_for_target_os_tags": [
                  "mingw", 
                  "windows", 
                  "linux"
                ], 
                "full_path": "/usr/bin/gcc"
              }, 
              "setup": {
                "version_split": [
                  5, 
                  4, 
                  0
                ], 
                "target_os_bits": "32", 
                "version": "5.4.0", 
                "host_os_uoa": "fb525e34243f49c1", 
                "target_os_uoa": "fb525e34243f49c1"
              }, 
              "data_name": "GNU C compiler", 
              "soft_uoa": "3a8a82fa40bf992d", 
              "env": {
                "CK_FLAGS_DYNAMIC_BIN": " ", 
                "CK_COMPILER_FLAGS_OBLIGATORY": "", 
                "CK_AR": "ar", 
                "CK_COMPILER_POSTFIX": "", 
                "CK_PROFILER": "gprof", 
                "CK_COMPILER_TOOLCHAIN_NAME": "gcc", 
                "CK_LIB_EXT": ".a", 
                "CK_OPT_SIZE": "-Os", 
                "CK_OPT_SPEED": "-O3", 
                "CK_COMPILER_FLAG_PTHREAD_LIB": "-lpthread", 
                "CK_CC": "gcc", 
                "CK_RANLIB": "ranlib", 
                "CK_COMPILER_FLAG_GPROF": "-pg", 
                "CK_OPT_ALL_WARNINGS": "-Wall", 
                "CK_LB_OUTPUT": "-o ", 
                "CK_FLAGS_STATIC_LIB": "-fPIC", 
                "CK_FLAG_PREFIX_VAR": "-D", 
                "CK_COMPILER_FLAG_STD90": "-std=c90", 
                "CK_EXTRA_LIB_M": "-lm", 
                "CK_COMPILER_FLAG_STD99": "-std=c99", 
                "CK_FLAG_PREFIX_LIB_DIR": "-L", 
                "CK_FLAGS_CREATE_OBJ": "-c", 
                "CK_LINKER_FLAG_OPENMP": "-lgomp -lrt", 
                "CK_OPT_UNWIND": " ", 
                "CK_OBJ_EXT": ".o", 
                "CK_FLAGS_OUTPUT": "-o ", 
                "CK_LB": "ar rcs", 
                "CK_LD": "ld", 
                "CK_COMPILER_FLAG_CPP11": "-std=c++11", 
                "CK_COMPILER_FLAG_OPENMP": "-fopenmp", 
                "CK_PLUGIN_FLAG": "-fplugin=", 
                "CK_OPT_SPEED_SAFE": "-O2", 
                "CK_DLL_EXT": ".so", 
                "CK_CXX": "g++", 
                "CK_ASM_EXT": ".s", 
                "CK_FLAG_PREFIX_INCLUDE": "-I", 
                "CK_LD_FLAGS_EXTRA": "", 
                "CK_OBJDUMP": "objdump -d", 
                "CK_EXE_EXT": ".out", 
                "CK_FLAGS_DLL_EXTRA": "", 
                "CK_FLAGS_DLL": "-shared -fPIC", 
                "CK_FLAGS_STATIC_BIN": "-static -fPIC", 
                "CK_ENV_COMPILER_GCC": "/usr", 
                "CK_EXTRA_LIB_DL": "-ldl", 
                "CK_GPROF_OUT_FILE": "gmon.out", 
                "CK_MAKE": "make", 
                "CK_COMPILER_FLAG_CPP0X": "-std=c++0x", 
                "CK_COMPILER_FLAG_PLUGIN": "-fplugin=", 
                "CK_FLAGS_CREATE_ASM": "-S"
              }, 
              "soft_alias": "compiler.gcc"
            }, 
            "ver": "5.4.0", 
            "local": "yes"
          }
        }, 
        "tags": [
          "32bits", 
          "host-os-linux-32", 
          "lang-c", 
          "lang-cpp", 
          "lang-f77", 
          "lang-f90", 
          "lang-f95", 
          "lib", 
          "rtl", 
          "target-os-linux-32", 
          "v0", 
          "v0.3", 
          "xopenme"
        ], 
        "customize": {
          "used_package_uid": "0573487b8121d094", 
          "used_package_uoa": "0573487b8121d094", 
          "dynamic_lib": "librtlxopenme.so", 
          "static_lib": "librtlxopenme.a", 
          "skip_path": "yes", 
          "path_include": "/home/test/CK_TOOLS/lib-rtl-xopenme-0.3-gcc-5.4.0-linux-32/include", 
          "include_name": "xopenme.h", 
          "version": "0.3", 
          "env_prefix": "CK_ENV_LIB_RTL_XOPENME", 
          "extra_dir": "", 
          "version_split": [
            0, 
            3
          ], 
          "full_path": "/home/test/CK_TOOLS/lib-rtl-xopenme-0.3-gcc-5.4.0-linux-32/lib/librtlxopenme.a", 
          "path_lib": "/home/test/CK_TOOLS/lib-rtl-xopenme-0.3-gcc-5.4.0-linux-32/lib"
        }, 
        "setup": {
          "deps_compiler": "42cc5e14c1e9955f", 
          "version": "0.3", 
          "version_split": [
            0, 
            3
          ], 
          "target_os_bits": "32", 
          "host_os_uoa": "fb525e34243f49c1", 
          "target_os_uoa": "fb525e34243f49c1"
        }, 
        "env_script": "env.sh", 
        "package_uoa": "0573487b8121d094", 
        "soft_uoa": "673507878d649b4a", 
        "env": {
          "CK_ENV_LIB_RTL_XOPENME_INCLUDE_NAME": "xopenme.h", 
          "CK_ENV_LIB_RTL_XOPENME_DYNAMIC_NAME": "librtlxopenme.so", 
          "CK_ENV_LIB_RTL_XOPENME": "/home/test/CK_TOOLS/lib-rtl-xopenme-0.3-gcc-5.4.0-linux-32", 
          "CK_ENV_LIB_RTL_XOPENME_STATIC_NAME": "librtlxopenme.a"
        }, 
        "soft_alias": "lib.rtl.xopenme"
      }, 
      "ver": "0.3", 
      "local": "yes"
    }, 
    "lib-opencl": {
      "sort": 15, 
      "bat": ". /home/test/CK_REPOS/local/env/b8b9f260739115c1/env.sh\n", 
      "cus": {
        "dynamic_lib": "libOpenCL.so", 
        "static_lib": "libOpenCL.so", 
        "env_prefix": "CK_ENV_LIB_OPENCL", 
        "skip_path": "yes", 
        "soft_file": {
          "win": "OpenCL.lib", 
          "linux": "libOpenCL.so"
        }, 
        "include_name": "CL/opencl.h", 
        "version": "v3", 
        "path_bin": "/usr/bin", 
        "version_split": [
          0
        ], 
        "limit_recursion_dir_search": {
          "win": 4, 
          "linux": 4
        }, 
        "check_that_exists": "yes", 
        "soft_path_example": {
          "win": "C:\\Program Files (x86)\\Intel\\OpenCL SDK\\4.6\\lib\\x64\\OpenCL.lib", 
          "linux": "/usr/lib/libOpenCL.so"
        }, 
        "path_include": "/usr/include", 
        "ck_version": 10, 
        "full_path": "/usr/lib/arm-linux-gnueabihf/libOpenCL.so", 
        "path_lib": "/usr/lib/arm-linux-gnueabihf"
      }, 
      "name": "OpenCL stubs library", 
      "tags": "lib,opencl", 
      "skip_default": "yes", 
      "num_entries": 1, 
      "choices": [
        "b8b9f260739115c1"
      ], 
      "uoa": "b8b9f260739115c1", 
      "ver": "v3", 
      "local": "yes"
    }, 
    "lib-blas": {
      "sort": 8, 
      "bat": ". /home/test/CK_REPOS/local/env/a00786622dd644dd/env.sh\n", 
      "cus": {
        "git_src_dir": "src", 
        "use_git_revision": "yes", 
        "skip_path": "yes", 
        "extra_dir": "", 
        "env_prefix": "CK_ENV_LIB_OPENBLAS", 
        "used_package_uid": "3becaf2cd0422880", 
        "used_package_uoa": "3becaf2cd0422880", 
        "soft_path_example": {
          "linux": "/usr/lib/libopenblas.so"
        }, 
        "static_lib": "libopenblas.a", 
        "version": "0.2.19-85636ff", 
        "path_lib": "/home/test/CK_TOOLS/lib-openblas-0.2.19-gcc-5.4.0-linux-32/install/lib", 
        "install_env": {
          "PACKAGE_AUTOGEN": "NO", 
          "PACKAGE_SKIP_CLEAN_OBJ": "NO", 
          "PACKAGE_SKIP_CLEAN_INSTALL": "NO", 
          "PACKAGE_GIT": "YES", 
          "PACKAGE_SKIP_CMAKE_TARGET": "YES", 
          "PACKAGE_BUILD_TYPE": "make", 
          "PACKAGE_SKIP_CLEAN_PACKAGE": "NO", 
          "PACKAGE_SUB_DIR": "src", 
          "PACKAGE_GIT_CHECKOUT": "v0.2.19", 
          "PACKAGE_SKIP_CLEAN_SRC_DIR": "NO", 
          "PACKAGE_PATCH": "YES", 
          "PACKAGE_URL": "https://github.com/xianyi/OpenBLAS", 
          "PACKAGE_CONFIGURE_FLAGS_ANDROID": "", 
          "PACKAGE_SUB_DIR1": "src"
        }, 
        "include_file": "cblas.h", 
        "soft_file": {
          "linux": "libopenblas.so"
        }, 
        "include_name": "cblas.h", 
        "git_info": {
          "revision": "85636ff", 
          "iso_datetime_cut": "20160831", 
          "iso_datetime_cut_revision": "20160831-85636ff", 
          "iso_datetime": "2016-08-31T23:58:42", 
          "datetime": "Wed Aug 31 23:58:42 2016 -0400"
        }, 
        "version_split": [
          0, 
          2, 
          19, 
          0
        ], 
        "limit_recursion_dir_search": {
          "linux": 3
        }, 
        "check_that_exists": "yes", 
        "ck_version": 10, 
        "dynamic_lib": "libopenblas.so", 
        "path_include": "/home/test/CK_TOOLS/lib-openblas-0.2.19-gcc-5.4.0-linux-32/install/include", 
        "full_path": "/home/test/CK_TOOLS/lib-openblas-0.2.19-gcc-5.4.0-linux-32/install/lib/libopenblas.a"
      }, 
      "name": "BLAS library", 
      "tags": "lib,blas,openblas", 
      "num_entries": 1, 
      "choices": [
        "a00786622dd644dd"
      ], 
      "uoa": "a00786622dd644dd", 
      "dict": {
        "data_name": "OpenBLAS library", 
        "deps": {
          "compiler-mingw": {
            "skip_installed": {
              "win": "yes"
            }, 
            "only_for_host_os_tags": [
              "windows"
            ], 
            "skip_from_bat": "yes", 
            "tags": "compiler,lang-c,gcc", 
            "sort": 5, 
            "add_to_path": "yes", 
            "force_target_as_host": "yes", 
            "local": "yes", 
            "name": "C compiler"
          }, 
          "compiler-gfortran": {
            "detected_ver": "5.4.0", 
            "sort": 15, 
            "bat": ". /home/test/CK_REPOS/local/env/47748e7af67b9a31/env.sh\n", 
            "ver": "5.4.0", 
            "name": "GNU Fortran compiler", 
            "tags": "compiler,gfortran", 
            "build_dir_name": "gfortran", 
            "uoa": "47748e7af67b9a31", 
            "only_for_target_os_tags": [
              "windows", 
              "linux"
            ], 
            "choices": [
              "47748e7af67b9a31"
            ], 
            "num_entries": 1, 
            "dict": {
              "env_script": "env.sh", 
              "deps": {}, 
              "tags": [
                "32bits", 
                "compiler", 
                "fortran", 
                "gfortran", 
                "host-os-linux-32", 
                "lang-f77", 
                "lang-f90", 
                "lang-f95", 
                "target-os-linux-32", 
                "v5", 
                "v5.4", 
                "v5.4.0"
              ], 
              "customize": {
                "can_strip_dynamic_lib": "yes", 
                "build_dir_name": "gfortran", 
                "skip_path": "yes", 
                "tool_prefix_configured": "yes", 
                "tool_prefix": "", 
                "tool_postfix_configured": "yes", 
                "env_prefix": "CK_ENV_COMPILER_GFORTRAN", 
                "soft_version_cmd": {
                  "win": " --version > $#filename#$ 2>&1", 
                  "linux": "--version > $#filename#$ 2>&1"
                }, 
                "soft_path_example": {
                  "win": "C:\\Program Files\\GCC-4.9.2-x64\\bin\\gfortran.exe", 
                  "linux": "/usr/bin/gfortran"
                }, 
                "languages": [
                  "F77", 
                  "F90", 
                  "F95"
                ], 
                "version": "5.4.0", 
                "soft_file_from_host_os": "yes", 
                "tool_postfix": "", 
                "soft_file": {
                  "win": "gfortran.exe", 
                  "linux": "gfortran"
                }, 
                "retarget": "no", 
                "search_numeric_ext_on_linux": "yes", 
                "add_m32": "yes", 
                "add_to_path": "yes", 
                "add_only_with_version": "yes", 
                "version_split": [
                  5, 
                  4, 
                  0
                ], 
                "limit_recursion_dir_search": {
                  "win": 4, 
                  "linux": 3
                }, 
                "check_that_exists": "yes", 
                "ck_version": 10, 
                "only_for_target_os_tags": [
                  "mingw", 
                  "windows", 
                  "linux"
                ], 
                "full_path": "/usr/bin/gfortran"
              }, 
              "setup": {
                "version_split": [
                  5, 
                  4, 
                  0
                ], 
                "target_os_bits": "32", 
                "version": "5.4.0", 
                "host_os_uoa": "fb525e34243f49c1", 
                "target_os_uoa": "fb525e34243f49c1"
              }, 
              "data_name": "GNU Fortran compiler", 
              "soft_uoa": "504d7e807c7b3146", 
              "env": {
                "CK_FLAGS_DYNAMIC_BIN": " ", 
                "CK_COMPILER_FLAGS_OBLIGATORY": "", 
                "CK_AR": "ar", 
                "CK_COMPILER_POSTFIX": "", 
                "CK_PROFILER": "gprof", 
                "CK_ENV_COMPILER_GFORTRAN": "/usr", 
                "CK_LIB_EXT": ".a", 
                "CK_OPT_SIZE": "-Os", 
                "CK_F95": "gfortran", 
                "CK_OPT_SPEED": "-O3", 
                "CK_COMPILER_FLAG_PTHREAD_LIB": "-lpthread", 
                "CK_COMPILER_FLAG_GPROF": "-pg", 
                "CK_OPT_ALL_WARNINGS": "-Wall", 
                "CK_LB_OUTPUT": "-o ", 
                "CK_FLAGS_STATIC_LIB": "-fPIC", 
                "CK_FLAG_PREFIX_VAR": "-D", 
                "CK_EXTRA_LIB_M": "-lm", 
                "CK_FLAG_PREFIX_LIB_DIR": "-L", 
                "CK_FLAGS_CREATE_OBJ": "-c", 
                "CK_LINKER_FLAG_OPENMP": "-lgomp -lrt", 
                "CK_FLAG_PREFIX_INCLUDE": "-I", 
                "CK_OPT_UNWIND": " ", 
                "CK_OBJ_EXT": ".o", 
                "CK_FLAGS_OUTPUT": "-o ", 
                "CK_LB": "ar rcs", 
                "CK_LD": "ld", 
                "CK_COMPILER_FLAG_CPP11": "-std=c++11", 
                "CK_COMPILER_FLAG_OPENMP": "-fopenmp", 
                "CK_PLUGIN_FLAG": "-fplugin=", 
                "CK_OPT_SPEED_SAFE": "-O2", 
                "CK_DLL_EXT": ".so", 
                "CK_ASM_EXT": ".s", 
                "CK_FC": "gfortran", 
                "CK_LD_FLAGS_EXTRA": "", 
                "CK_OBJDUMP": "objdump -d", 
                "CK_EXE_EXT": ".out", 
                "CK_F90": "gfortran", 
                "CK_FLAGS_DLL_EXTRA": "", 
                "CK_FLAGS_DLL": "-shared -fPIC", 
                "CK_COMPILER_TOOLCHAIN_NAME": "gcc", 
                "CK_FLAGS_STATIC_BIN": "-static -fPIC", 
                "CK_EXTRA_LIB_DL": "-ldl", 
                "CK_GPROF_OUT_FILE": "gmon.out", 
                "CK_MAKE": "make", 
                "CK_COMPILER_FLAG_CPP0X": "-std=c++0x", 
                "CK_COMPILER_FLAG_PLUGIN": "-fplugin=", 
                "CK_FLAGS_CREATE_ASM": "-S"
              }, 
              "soft_alias": "compiler.gfortran"
            }, 
            "local": "yes", 
            "skip_from_bat": "yes"
          }, 
          "utils-unix-win": {
            "sort": 1, 
            "only_for_host_os_tags": [
              "windows"
            ], 
            "skip_from_bat": "yes", 
            "tags": "utils,unix-win", 
            "force_target_as_host": "yes", 
            "local": "yes", 
            "name": "Unix Utils for Windows"
          }, 
          "compiler-perl": {
            "skip_installed": {
              "win": "yes"
            }, 
            "only_for_host_os_tags": [
              "windows"
            ], 
            "skip_from_bat": "yes", 
            "tags": "compiler,perl", 
            "sort": 3, 
            "force_target_as_host": "yes", 
            "local": "yes", 
            "name": "Perl"
          }, 
          "compiler": {
            "detected_ver": "5.4.0", 
            "sort": 10, 
            "bat": ". /home/test/CK_REPOS/local/env/42cc5e14c1e9955f/env.sh\n", 
            "ver": "5.4.0", 
            "name": "C++ compiler", 
            "tags": "compiler,lang-cpp", 
            "build_dir_name": "gcc", 
            "uoa": "42cc5e14c1e9955f", 
            "choices": [
              "42cc5e14c1e9955f"
            ], 
            "num_entries": 1, 
            "update_tags_by_target_platform2": {
              "win": "mcl", 
              "android": "gcc", 
              "linux": "gcc"
            }, 
            "dict": {
              "env_script": "env.sh", 
              "deps": {}, 
              "tags": [
                "32bits", 
                "compiler", 
                "gcc", 
                "host-os-linux-32", 
                "lang-c", 
                "lang-cpp", 
                "target-os-linux-32", 
                "v5", 
                "v5.4", 
                "v5.4.0"
              ], 
              "customize": {
                "can_strip_dynamic_lib": "yes", 
                "build_dir_name": "gcc", 
                "skip_path": "yes", 
                "tool_prefix_configured": "yes", 
                "tool_prefix": "", 
                "tool_postfix_configured": "yes", 
                "env_prefix": "CK_ENV_COMPILER_GCC", 
                "soft_version_cmd": {
                  "win": " --version > $#filename#$ 2>&1", 
                  "linux": "--version > $#filename#$ 2>&1"
                }, 
                "soft_path_example": {
                  "win": "C:\\Program Files\\GCC-4.9.2-x64\\bin\\gcc.exe", 
                  "linux": "/usr/bin/gcc"
                }, 
                "languages": [
                  "C", 
                  "CPP"
                ], 
                "version": "5.4.0", 
                "soft_file_from_host_os": "yes", 
                "tool_postfix": "", 
                "soft_file": {
                  "win": "gcc.exe", 
                  "linux": "gcc"
                }, 
                "retarget": "no", 
                "search_numeric_ext_on_linux": "yes", 
                "add_m32": "yes", 
                "add_to_path": "yes", 
                "add_only_with_version": "yes", 
                "version_split": [
                  5, 
                  4, 
                  0
                ], 
                "limit_recursion_dir_search": {
                  "win": 4, 
                  "linux": 3
                }, 
                "check_that_exists": "yes", 
                "ck_version": 10, 
                "only_for_target_os_tags": [
                  "mingw", 
                  "windows", 
                  "linux"
                ], 
                "full_path": "/usr/bin/gcc"
              }, 
              "setup": {
                "version_split": [
                  5, 
                  4, 
                  0
                ], 
                "target_os_bits": "32", 
                "version": "5.4.0", 
                "host_os_uoa": "fb525e34243f49c1", 
                "target_os_uoa": "fb525e34243f49c1"
              }, 
              "data_name": "GNU C compiler", 
              "soft_uoa": "3a8a82fa40bf992d", 
              "env": {
                "CK_FLAGS_DYNAMIC_BIN": " ", 
                "CK_COMPILER_FLAGS_OBLIGATORY": "", 
                "CK_AR": "ar", 
                "CK_COMPILER_POSTFIX": "", 
                "CK_PROFILER": "gprof", 
                "CK_COMPILER_TOOLCHAIN_NAME": "gcc", 
                "CK_LIB_EXT": ".a", 
                "CK_OPT_SIZE": "-Os", 
                "CK_OPT_SPEED": "-O3", 
                "CK_COMPILER_FLAG_PTHREAD_LIB": "-lpthread", 
                "CK_CC": "gcc", 
                "CK_RANLIB": "ranlib", 
                "CK_COMPILER_FLAG_GPROF": "-pg", 
                "CK_OPT_ALL_WARNINGS": "-Wall", 
                "CK_LB_OUTPUT": "-o ", 
                "CK_FLAGS_STATIC_LIB": "-fPIC", 
                "CK_FLAG_PREFIX_VAR": "-D", 
                "CK_COMPILER_FLAG_STD90": "-std=c90", 
                "CK_EXTRA_LIB_M": "-lm", 
                "CK_COMPILER_FLAG_STD99": "-std=c99", 
                "CK_FLAG_PREFIX_LIB_DIR": "-L", 
                "CK_FLAGS_CREATE_OBJ": "-c", 
                "CK_LINKER_FLAG_OPENMP": "-lgomp -lrt", 
                "CK_OPT_UNWIND": " ", 
                "CK_OBJ_EXT": ".o", 
                "CK_FLAGS_OUTPUT": "-o ", 
                "CK_LB": "ar rcs", 
                "CK_LD": "ld", 
                "CK_COMPILER_FLAG_CPP11": "-std=c++11", 
                "CK_COMPILER_FLAG_OPENMP": "-fopenmp", 
                "CK_PLUGIN_FLAG": "-fplugin=", 
                "CK_OPT_SPEED_SAFE": "-O2", 
                "CK_DLL_EXT": ".so", 
                "CK_CXX": "g++", 
                "CK_ASM_EXT": ".s", 
                "CK_FLAG_PREFIX_INCLUDE": "-I", 
                "CK_LD_FLAGS_EXTRA": "", 
                "CK_OBJDUMP": "objdump -d", 
                "CK_EXE_EXT": ".out", 
                "CK_FLAGS_DLL_EXTRA": "", 
                "CK_FLAGS_DLL": "-shared -fPIC", 
                "CK_FLAGS_STATIC_BIN": "-static -fPIC", 
                "CK_ENV_COMPILER_GCC": "/usr", 
                "CK_EXTRA_LIB_DL": "-ldl", 
                "CK_GPROF_OUT_FILE": "gmon.out", 
                "CK_MAKE": "make", 
                "CK_COMPILER_FLAG_CPP0X": "-std=c++0x", 
                "CK_COMPILER_FLAG_PLUGIN": "-fplugin=", 
                "CK_FLAGS_CREATE_ASM": "-S"
              }, 
              "soft_alias": "compiler.gcc"
            }, 
            "local": "yes"
          }
        }, 
        "tags": [
          "32bits", 
          "blas", 
          "cblas", 
          "host-os-linux-32", 
          "lib", 
          "openblas", 
          "target-os-linux-32", 
          "v0", 
          "v0.2", 
          "v0.2.19", 
          "v0.2.19.0"
        ], 
        "customize": {
          "git_src_dir": "src", 
          "use_git_revision": "yes", 
          "skip_path": "yes", 
          "extra_dir": "", 
          "env_prefix": "CK_ENV_LIB_OPENBLAS", 
          "used_package_uid": "3becaf2cd0422880", 
          "used_package_uoa": "3becaf2cd0422880", 
          "soft_path_example": {
            "linux": "/usr/lib/libopenblas.so"
          }, 
          "static_lib": "libopenblas.a", 
          "version": "0.2.19-85636ff", 
          "path_lib": "/home/test/CK_TOOLS/lib-openblas-0.2.19-gcc-5.4.0-linux-32/install/lib", 
          "install_env": {
            "PACKAGE_AUTOGEN": "NO", 
            "PACKAGE_SKIP_CLEAN_OBJ": "NO", 
            "PACKAGE_SKIP_CLEAN_INSTALL": "NO", 
            "PACKAGE_GIT": "YES", 
            "PACKAGE_SKIP_CMAKE_TARGET": "YES", 
            "PACKAGE_BUILD_TYPE": "make", 
            "PACKAGE_SKIP_CLEAN_PACKAGE": "NO", 
            "PACKAGE_SUB_DIR": "src", 
            "PACKAGE_GIT_CHECKOUT": "v0.2.19", 
            "PACKAGE_SKIP_CLEAN_SRC_DIR": "NO", 
            "PACKAGE_PATCH": "YES", 
            "PACKAGE_URL": "https://github.com/xianyi/OpenBLAS", 
            "PACKAGE_CONFIGURE_FLAGS_ANDROID": "", 
            "PACKAGE_SUB_DIR1": "src"
          }, 
          "include_file": "cblas.h", 
          "soft_file": {
            "linux": "libopenblas.so"
          }, 
          "include_name": "cblas.h", 
          "git_info": {
            "revision": "85636ff", 
            "iso_datetime_cut": "20160831", 
            "iso_datetime_cut_revision": "20160831-85636ff", 
            "iso_datetime": "2016-08-31T23:58:42", 
            "datetime": "Wed Aug 31 23:58:42 2016 -0400"
          }, 
          "version_split": [
            0, 
            2, 
            19, 
            0
          ], 
          "limit_recursion_dir_search": {
            "linux": 3
          }, 
          "check_that_exists": "yes", 
          "ck_version": 10, 
          "dynamic_lib": "libopenblas.so", 
          "path_include": "/home/test/CK_TOOLS/lib-openblas-0.2.19-gcc-5.4.0-linux-32/install/include", 
          "full_path": "/home/test/CK_TOOLS/lib-openblas-0.2.19-gcc-5.4.0-linux-32/install/lib/libopenblas.a"
        }, 
        "setup": {
          "deps_compiler": "42cc5e14c1e9955f", 
          "deps_compiler-gfortran": "47748e7af67b9a31", 
          "version": "0.2.19-85636ff", 
          "version_split": [
            0, 
            2, 
            19, 
            0
          ], 
          "target_os_bits": "32", 
          "host_os_uoa": "fb525e34243f49c1", 
          "target_os_uoa": "fb525e34243f49c1"
        }, 
        "env_script": "env.sh", 
        "package_uoa": "3becaf2cd0422880", 
        "soft_uoa": "252d8364ec25497b", 
        "env": {
          "CK_ENV_LIB_OPENBLAS_INCLUDE_NAME": "cblas.h", 
          "CK_ENV_LIB_OPENBLAS_STATIC_NAME": "libopenblas.a", 
          "CK_ENV_LIB_OPENBLAS": "/home/test/CK_TOOLS/lib-openblas-0.2.19-gcc-5.4.0-linux-32/install", 
          "CK_ENV_LIB_OPENBLAS_DYNAMIC_NAME": "libopenblas.so"
        }, 
        "soft_alias": "lib.openblas"
      }, 
      "ver": "0.2.19-85636ff", 
      "local": "yes"
    }, 
    "caffemodel": {
      "sort": 40, 
      "for_run_time": "yes", 
      "bat": ". /home/test/CK_REPOS/local/env/1173d08d774442d9/env.sh\n", 
      "ver": "trunk", 
      "name": "Caffe model (net and weights)", 
      "tags": "caffemodel", 
      "num_entries": 1, 
      "choices": [
        "1173d08d774442d9"
      ], 
      "uoa": "1173d08d774442d9", 
      "dict": {
        "data_name": "Caffe model (net and weights) (bvlc, alexnet)", 
        "deps": {}, 
        "tags": [
          "32bits", 
          "alexnet", 
          "bvlc", 
          "caffe", 
          "caffemodel", 
          "host-os-linux-32", 
          "mirror", 
          "net", 
          "target-os-linux-32", 
          "v0", 
          "weights"
        ], 
        "customize": {
          "force_ask_path": "yes", 
          "used_package_uid": "29043e1b6a95bed6", 
          "used_package_uoa": "caffemodel-bvlc-alexnet-fast-mirror", 
          "soft_file": {
            "win": "deploy.prototxt", 
            "linux": "deploy.prototxt"
          }, 
          "package_extra_name": " (bvlc, alexnet)", 
          "ck_params_file": "ck-params.json", 
          "skip_path": "yes", 
          "check_that_exists": "yes", 
          "version_split": [
            0
          ], 
          "version": "trunk", 
          "params": {
            "train": {
              "template": "train_val.prototxt", 
              "substitute": {
                "train_batch_size": 256, 
                "val_batch_size": 50, 
                "val_mean": "$#path_to_imagenet_aux#$imagenet_mean.binaryproto", 
                "train_mean": "$#path_to_imagenet_aux#$imagenet_mean.binaryproto"
              }
            }, 
            "val": {
              "template": "train_val.prototxt", 
              "substitute": {
                "train_batch_size": 256, 
                "val_batch_size": 50, 
                "val_mean": "$#path_to_imagenet_aux#$imagenet_mean.binaryproto", 
                "train_mean": "$#path_to_imagenet_aux#$imagenet_mean.binaryproto"
              }, 
              "accuracy_layers": [
                "accuracy", 
                "accuracy_top5", 
                "loss"
              ]
            }, 
            "deploy": {
              "template": "deploy.prototxt", 
              "substitute": {
                "batch_size": 10
              }
            }
          }, 
          "full_path": "/home/test/CK_TOOLS/caffemodel-bvlc-alexnet-fast-mirror/bvlc_alexnet.caffemodel", 
          "file_with_weights": "bvlc_alexnet.caffemodel", 
          "extra_dir": "", 
          "skip_file_check": "yes", 
          "limit_recursion_dir_search": {
            "win": 3, 
            "linux": 3
          }, 
          "install_env": {
            "MODEL_HASH_CALCULATOR": "sha1sum", 
            "MODEL_FILE": "bvlc_alexnet.caffemodel", 
            "MODEL_URL": "https://nvidia.box.com/shared/static/5j264j7mky11q8emy4q14w3r8hl5v6zh.caffemodel", 
            "MODEL_HASH_REF": "9116a64c0fbe4459d18f4bb6b56d647b63920377"
          }, 
          "no_ver_in_suggested_path": "yes", 
          "ck_version": 10, 
          "env_prefix": "CK_ENV_MODEL_CAFFE", 
          "no_os_in_suggested_path": "yes"
        }, 
        "setup": {
          "version_split": [
            0
          ], 
          "target_os_bits": "32", 
          "version": "trunk", 
          "host_os_uoa": "fb525e34243f49c1", 
          "target_os_uoa": "fb525e34243f49c1"
        }, 
        "env_script": "env.sh", 
        "package_uoa": "29043e1b6a95bed6", 
        "soft_uoa": "e2400aabc11d6cd1", 
        "env": {
          "CK_ENV_MODEL_CAFFE_WEIGHTS_FILE": "bvlc_alexnet.caffemodel", 
          "CK_ENV_MODEL_CAFFE_WEIGHTS": "/home/test/CK_TOOLS/caffemodel-bvlc-alexnet-fast-mirror/bvlc_alexnet.caffemodel", 
          "CK_ENV_MODEL_CAFFE": "/home/test/CK_TOOLS/caffemodel-bvlc-alexnet-fast-mirror"
        }, 
        "soft_alias": "model.caffe"
      }, 
      "local": "yes", 
      "force_target_as_host": "yes"
    }, 
    "compiler": {
      "sort": 0, 
      "detected_ver": "5.4.0", 
      "bat": ". /home/test/CK_REPOS/local/env/42cc5e14c1e9955f/env.sh\n", 
      "cus": {
        "can_strip_dynamic_lib": "yes", 
        "build_dir_name": "gcc", 
        "skip_path": "yes", 
        "tool_prefix_configured": "yes", 
        "tool_prefix": "", 
        "tool_postfix_configured": "yes", 
        "env_prefix": "CK_ENV_COMPILER_GCC", 
        "soft_version_cmd": {
          "win": " --version > $#filename#$ 2>&1", 
          "linux": "--version > $#filename#$ 2>&1"
        }, 
        "soft_path_example": {
          "win": "C:\\Program Files\\GCC-4.9.2-x64\\bin\\gcc.exe", 
          "linux": "/usr/bin/gcc"
        }, 
        "languages": [
          "C", 
          "CPP"
        ], 
        "version": "5.4.0", 
        "soft_file_from_host_os": "yes", 
        "tool_postfix": "", 
        "soft_file": {
          "win": "gcc.exe", 
          "linux": "gcc"
        }, 
        "retarget": "no", 
        "search_numeric_ext_on_linux": "yes", 
        "add_m32": "yes", 
        "add_to_path": "yes", 
        "add_only_with_version": "yes", 
        "version_split": [
          5, 
          4, 
          0
        ], 
        "limit_recursion_dir_search": {
          "win": 4, 
          "linux": 3
        }, 
        "check_that_exists": "yes", 
        "ck_version": 10, 
        "only_for_target_os_tags": [
          "mingw", 
          "windows", 
          "linux"
        ], 
        "full_path": "/usr/bin/gcc"
      }, 
      "name": "C++ compiler", 
      "tags": "compiler,lang-cpp", 
      "build_dir_name": "gcc", 
      "num_entries": 1, 
      "choices": [
        "42cc5e14c1e9955f"
      ], 
      "uoa": "42cc5e14c1e9955f", 
      "dict": {
        "data_name": "GNU C compiler", 
        "deps": {}, 
        "tags": [
          "32bits", 
          "compiler", 
          "gcc", 
          "host-os-linux-32", 
          "lang-c", 
          "lang-cpp", 
          "target-os-linux-32", 
          "v5", 
          "v5.4", 
          "v5.4.0"
        ], 
        "customize": {
          "can_strip_dynamic_lib": "yes", 
          "build_dir_name": "gcc", 
          "skip_path": "yes", 
          "tool_prefix_configured": "yes", 
          "tool_prefix": "", 
          "tool_postfix_configured": "yes", 
          "env_prefix": "CK_ENV_COMPILER_GCC", 
          "soft_version_cmd": {
            "win": " --version > $#filename#$ 2>&1", 
            "linux": "--version > $#filename#$ 2>&1"
          }, 
          "soft_path_example": {
            "win": "C:\\Program Files\\GCC-4.9.2-x64\\bin\\gcc.exe", 
            "linux": "/usr/bin/gcc"
          }, 
          "languages": [
            "C", 
            "CPP"
          ], 
          "version": "5.4.0", 
          "soft_file_from_host_os": "yes", 
          "tool_postfix": "", 
          "soft_file": {
            "win": "gcc.exe", 
            "linux": "gcc"
          }, 
          "retarget": "no", 
          "search_numeric_ext_on_linux": "yes", 
          "add_m32": "yes", 
          "add_to_path": "yes", 
          "add_only_with_version": "yes", 
          "version_split": [
            5, 
            4, 
            0
          ], 
          "limit_recursion_dir_search": {
            "win": 4, 
            "linux": 3
          }, 
          "check_that_exists": "yes", 
          "ck_version": 10, 
          "only_for_target_os_tags": [
            "mingw", 
            "windows", 
            "linux"
          ], 
          "full_path": "/usr/bin/gcc"
        }, 
        "setup": {
          "version_split": [
            5, 
            4, 
            0
          ], 
          "target_os_bits": "32", 
          "version": "5.4.0", 
          "host_os_uoa": "fb525e34243f49c1", 
          "target_os_uoa": "fb525e34243f49c1"
        }, 
        "env_script": "env.sh", 
        "soft_uoa": "3a8a82fa40bf992d", 
        "env": {
          "CK_FLAGS_DYNAMIC_BIN": " ", 
          "CK_COMPILER_FLAGS_OBLIGATORY": "", 
          "CK_AR": "ar", 
          "CK_COMPILER_POSTFIX": "", 
          "CK_PROFILER": "gprof", 
          "CK_COMPILER_TOOLCHAIN_NAME": "gcc", 
          "CK_LIB_EXT": ".a", 
          "CK_OPT_SIZE": "-Os", 
          "CK_OPT_SPEED": "-O3", 
          "CK_COMPILER_FLAG_PTHREAD_LIB": "-lpthread", 
          "CK_CC": "gcc", 
          "CK_RANLIB": "ranlib", 
          "CK_COMPILER_FLAG_GPROF": "-pg", 
          "CK_OPT_ALL_WARNINGS": "-Wall", 
          "CK_LB_OUTPUT": "-o ", 
          "CK_FLAGS_STATIC_LIB": "-fPIC", 
          "CK_FLAG_PREFIX_VAR": "-D", 
          "CK_COMPILER_FLAG_STD90": "-std=c90", 
          "CK_EXTRA_LIB_M": "-lm", 
          "CK_COMPILER_FLAG_STD99": "-std=c99", 
          "CK_FLAG_PREFIX_LIB_DIR": "-L", 
          "CK_FLAGS_CREATE_OBJ": "-c", 
          "CK_LINKER_FLAG_OPENMP": "-lgomp -lrt", 
          "CK_OPT_UNWIND": " ", 
          "CK_OBJ_EXT": ".o", 
          "CK_FLAGS_OUTPUT": "-o ", 
          "CK_LB": "ar rcs", 
          "CK_LD": "ld", 
          "CK_COMPILER_FLAG_CPP11": "-std=c++11", 
          "CK_COMPILER_FLAG_OPENMP": "-fopenmp", 
          "CK_PLUGIN_FLAG": "-fplugin=", 
          "CK_OPT_SPEED_SAFE": "-O2", 
          "CK_DLL_EXT": ".so", 
          "CK_CXX": "g++", 
          "CK_ASM_EXT": ".s", 
          "CK_FLAG_PREFIX_INCLUDE": "-I", 
          "CK_LD_FLAGS_EXTRA": "", 
          "CK_OBJDUMP": "objdump -d", 
          "CK_EXE_EXT": ".out", 
          "CK_FLAGS_DLL_EXTRA": "", 
          "CK_FLAGS_DLL": "-shared -fPIC", 
          "CK_FLAGS_STATIC_BIN": "-static -fPIC", 
          "CK_ENV_COMPILER_GCC": "/usr", 
          "CK_EXTRA_LIB_DL": "-ldl", 
          "CK_GPROF_OUT_FILE": "gmon.out", 
          "CK_MAKE": "make", 
          "CK_COMPILER_FLAG_CPP0X": "-std=c++0x", 
          "CK_COMPILER_FLAG_PLUGIN": "-fplugin=", 
          "CK_FLAGS_CREATE_ASM": "-S"
        }, 
        "soft_alias": "compiler.gcc"
      }, 
      "ver": "5.4.0", 
      "local": "yes"
    }, 
    "boost": {
      "sort": 30, 
      "bat": ". /home/test/CK_REPOS/local/env/d3b0a48d7954582d/env.sh\n", 
      "cus": {
        "path_include": "/usr/include", 
        "skip_path": "yes", 
        "soft_file": {
          "win": "libboost_system.lib", 
          "linux": "libboost_system.so"
        }, 
        "version": "1.58.0", 
        "env_prefix": "CK_ENV_LIB_BOOST", 
        "version_split": [
          1, 
          58, 
          0
        ], 
        "limit_recursion_dir_search": {
          "win": 3, 
          "linux": 3
        }, 
        "check_that_exists": "yes", 
        "soft_path_example": {
          "win": "", 
          "linux": "/usr/lib/x86_64-linux-gnu/libboost_system.so"
        }, 
        "ck_version": 10, 
        "full_path": "/usr/lib/arm-linux-gnueabihf/libboost_system.so", 
        "path_lib": "/usr/lib/arm-linux-gnueabihf"
      }, 
      "name": "Boost C++ libraries", 
      "tags": "lib,boost", 
      "num_entries": 1, 
      "choices": [
        "d3b0a48d7954582d"
      ], 
      "uoa": "d3b0a48d7954582d", 
      "dict": {
        "data_name": "Boost library", 
        "deps": {}, 
        "tags": [
          "32bits", 
          "boost", 
          "host-os-linux-32", 
          "lib", 
          "target-os-linux-32", 
          "v1", 
          "v1.58", 
          "v1.58.0"
        ], 
        "customize": {
          "path_include": "/usr/include", 
          "skip_path": "yes", 
          "soft_file": {
            "win": "libboost_system.lib", 
            "linux": "libboost_system.so"
          }, 
          "version": "1.58.0", 
          "env_prefix": "CK_ENV_LIB_BOOST", 
          "version_split": [
            1, 
            58, 
            0
          ], 
          "limit_recursion_dir_search": {
            "win": 3, 
            "linux": 3
          }, 
          "check_that_exists": "yes", 
          "soft_path_example": {
            "win": "", 
            "linux": "/usr/lib/x86_64-linux-gnu/libboost_system.so"
          }, 
          "ck_version": 10, 
          "full_path": "/usr/lib/arm-linux-gnueabihf/libboost_system.so", 
          "path_lib": "/usr/lib/arm-linux-gnueabihf"
        }, 
        "setup": {
          "version_split": [
            1, 
            58, 
            0
          ], 
          "target_os_bits": "32", 
          "version": "1.58.0", 
          "host_os_uoa": "fb525e34243f49c1", 
          "target_os_uoa": "fb525e34243f49c1"
        }, 
        "env_script": "env.sh", 
        "soft_uoa": "23949f2a32490faf", 
        "env": {
          "CK_ENV_LIB_BOOST_LFLAG_FILESYSTEM": "-lboost_filesystem", 
          "CK_ENV_LIB_BOOST_LFLAG_THREAD": "-lboost_thread", 
          "CK_ENV_LIB_BOOST_LFLAG_SYSTEM": "-lboost_system", 
          "CK_ENV_LIB_BOOST_LFLAG_DATE_TIME": "-lboost_date_time", 
          "CK_ENV_LIB_BOOST": "/usr"
        }, 
        "soft_alias": "lib.boost"
      }, 
      "ver": "1.58.0", 
      "local": "yes", 
      "skip_from_bat": "yes"
    }, 
    "lib-lmdb": {
      "sort": 5, 
      "local": "yes", 
      "name": "LMDB library", 
      "only_for_target_os_tags": [
        "windows"
      ], 
      "tags": "lib,lmdb"
    }, 
    "lib-boost": {
      "sort": 13, 
      "bat": ". /home/test/CK_REPOS/local/env/d3b0a48d7954582d/env.sh\n", 
      "cus": {
        "path_include": "/usr/include", 
        "skip_path": "yes", 
        "soft_file": {
          "win": "libboost_system.lib", 
          "linux": "libboost_system.so"
        }, 
        "version": "1.58.0", 
        "env_prefix": "CK_ENV_LIB_BOOST", 
        "version_split": [
          1, 
          58, 
          0
        ], 
        "limit_recursion_dir_search": {
          "win": 3, 
          "linux": 3
        }, 
        "check_that_exists": "yes", 
        "soft_path_example": {
          "win": "", 
          "linux": "/usr/lib/x86_64-linux-gnu/libboost_system.so"
        }, 
        "ck_version": 10, 
        "full_path": "/usr/lib/arm-linux-gnueabihf/libboost_system.so", 
        "path_lib": "/usr/lib/arm-linux-gnueabihf"
      }, 
      "name": "Boost library", 
      "tags": "lib,boost", 
      "num_entries": 1, 
      "choices": [
        "d3b0a48d7954582d"
      ], 
      "uoa": "d3b0a48d7954582d", 
      "dict": {
        "data_name": "Boost library", 
        "deps": {}, 
        "tags": [
          "32bits", 
          "boost", 
          "host-os-linux-32", 
          "lib", 
          "target-os-linux-32", 
          "v1", 
          "v1.58", 
          "v1.58.0"
        ], 
        "customize": {
          "path_include": "/usr/include", 
          "skip_path": "yes", 
          "soft_file": {
            "win": "libboost_system.lib", 
            "linux": "libboost_system.so"
          }, 
          "version": "1.58.0", 
          "env_prefix": "CK_ENV_LIB_BOOST", 
          "version_split": [
            1, 
            58, 
            0
          ], 
          "limit_recursion_dir_search": {
            "win": 3, 
            "linux": 3
          }, 
          "check_that_exists": "yes", 
          "soft_path_example": {
            "win": "", 
            "linux": "/usr/lib/x86_64-linux-gnu/libboost_system.so"
          }, 
          "ck_version": 10, 
          "full_path": "/usr/lib/arm-linux-gnueabihf/libboost_system.so", 
          "path_lib": "/usr/lib/arm-linux-gnueabihf"
        }, 
        "setup": {
          "version_split": [
            1, 
            58, 
            0
          ], 
          "target_os_bits": "32", 
          "version": "1.58.0", 
          "host_os_uoa": "fb525e34243f49c1", 
          "target_os_uoa": "fb525e34243f49c1"
        }, 
        "env_script": "env.sh", 
        "soft_uoa": "23949f2a32490faf", 
        "env": {
          "CK_ENV_LIB_BOOST_LFLAG_FILESYSTEM": "-lboost_filesystem", 
          "CK_ENV_LIB_BOOST_LFLAG_THREAD": "-lboost_thread", 
          "CK_ENV_LIB_BOOST_LFLAG_SYSTEM": "-lboost_system", 
          "CK_ENV_LIB_BOOST_LFLAG_DATE_TIME": "-lboost_date_time", 
          "CK_ENV_LIB_BOOST": "/usr"
        }, 
        "soft_alias": "lib.boost"
      }, 
      "force_add_static_lib_path": "yes", 
      "local": "yes", 
      "ver": "1.58.0"
    }, 
    "lib-opencv": {
      "sort": 10, 
      "bat": ". /home/test/CK_REPOS/local/env/470eba29ef36bbe1/env.sh\n", 
      "cus": {
        "path_static_lib": "/usr/lib/arm-linux-gnueabihf", 
        "dynamic_lib": "libopencv_core.so", 
        "env_prefix": "CK_ENV_LIB_OPENCV", 
        "skip_path": "yes", 
        "soft_file": {
          "win": "opencv_annotation.exe", 
          "linux": "libopencv_core.so"
        }, 
        "version": "2.4.9", 
        "soft_path_example": {
          "linux": "/usr/lib/x86_64-linux-gnu/libopencv_core.so"
        }, 
        "path_lib": "/usr/lib/arm-linux-gnueabihf", 
        "version_split": [
          2, 
          4, 
          9
        ], 
        "limit_recursion_dir_search": {
          "win": 5, 
          "linux": 4
        }, 
        "check_that_exists": "yes", 
        "path_dynamic_lib": "/usr/lib/arm-linux-gnueabihf", 
        "path_include": "/usr/include", 
        "ck_version": 10, 
        "full_path": "/usr/lib/arm-linux-gnueabihf/libopencv_core.so", 
        "extra_dynamic_libs": {
          "opencv_highgui": "libopencv_highgui.so", 
          "opencv_ocl": "libopencv_ocl.so", 
          "opencv_imgproc": "libopencv_imgproc.so"
        }
      }, 
      "name": "OpenCV library", 
      "tags": "lib,opencv", 
      "num_entries": 1, 
      "choices": [
        "470eba29ef36bbe1"
      ], 
      "uoa": "470eba29ef36bbe1", 
      "dict": {
        "data_name": "OpenCV library", 
        "deps": {}, 
        "tags": [
          "32bits", 
          "host-os-linux-32", 
          "lib", 
          "opencv", 
          "target-os-linux-32", 
          "v2", 
          "v2.4", 
          "v2.4.9"
        ], 
        "customize": {
          "path_static_lib": "/usr/lib/arm-linux-gnueabihf", 
          "dynamic_lib": "libopencv_core.so", 
          "env_prefix": "CK_ENV_LIB_OPENCV", 
          "skip_path": "yes", 
          "soft_file": {
            "win": "opencv_annotation.exe", 
            "linux": "libopencv_core.so"
          }, 
          "version": "2.4.9", 
          "soft_path_example": {
            "linux": "/usr/lib/x86_64-linux-gnu/libopencv_core.so"
          }, 
          "path_lib": "/usr/lib/arm-linux-gnueabihf", 
          "version_split": [
            2, 
            4, 
            9
          ], 
          "limit_recursion_dir_search": {
            "win": 5, 
            "linux": 4
          }, 
          "check_that_exists": "yes", 
          "path_dynamic_lib": "/usr/lib/arm-linux-gnueabihf", 
          "path_include": "/usr/include", 
          "ck_version": 10, 
          "full_path": "/usr/lib/arm-linux-gnueabihf/libopencv_core.so", 
          "extra_dynamic_libs": {
            "opencv_highgui": "libopencv_highgui.so", 
            "opencv_ocl": "libopencv_ocl.so", 
            "opencv_imgproc": "libopencv_imgproc.so"
          }
        }, 
        "setup": {
          "version_split": [
            2, 
            4, 
            9
          ], 
          "target_os_bits": "32", 
          "version": "2.4.9", 
          "host_os_uoa": "fb525e34243f49c1", 
          "target_os_uoa": "fb525e34243f49c1"
        }, 
        "env_script": "env.sh", 
        "soft_uoa": "18eb79fe079438fb", 
        "env": {
          "CK_ENV_LIB_OPENCV_LFLAG_HIGHGUI": "-lopencv_highgui", 
          "CK_ENV_LIB_OPENCV_LFLAG_IMGPROC": "-lopencv_imgproc", 
          "CK_ENV_LIB_OPENCV_DYNAMIC_LIB_PATH": "/usr/lib/arm-linux-gnueabihf", 
          "CK_ENV_LIB_OPENCV_LFLAG_CORE": "-lopencv_core", 
          "CK_ENV_LIB_OPENCV_STATIC_LIB_PATH": "/usr/lib/arm-linux-gnueabihf", 
          "CK_ENV_LIB_OPENCV": "/usr"
        }, 
        "soft_alias": "lib.opencv"
      }, 
      "ver": "2.4.9", 
      "local": "yes"
    }
  }, 
  "no_compiler_description": "yes", 
  "choices_desc": {}, 
  "speed": "no"
}
